
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\007\000\002\003\007" +
    "\000\002\022\002\000\002\003\006\000\002\023\002\000" +
    "\002\024\002\000\002\003\013\000\002\025\002\000\002" +
    "\026\002\000\002\003\012\000\002\027\002\000\002\003" +
    "\013\000\002\030\002\000\002\031\002\000\002\032\002" +
    "\000\002\003\020\000\002\003\004\000\002\011\004\000" +
    "\002\011\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\003\000\002\013" +
    "\005\000\002\013\005\000\002\014\003\000\002\014\004" +
    "\000\002\015\005\000\002\016\005\000\002\007\002\000" +
    "\002\007\004\000\002\005\002\000\002\005\003\000\002" +
    "\010\002\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\006\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\005\000\002\004\005\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\005" +
    "\000\002\021\002\000\002\021\004\000\002\017\005\000" +
    "\002\020\003\000\002\020\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\004\000\002\033\002" +
    "\000\002\006\006\000\002\034\002\000\002\006\006\000" +
    "\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\044\006\005\023\016\027\012\034\026\036" +
    "\015\040\017\041\010\042\030\043\006\044\027\045\031" +
    "\047\007\050\023\051\011\052\021\053\004\054\022\001" +
    "\002\000\004\046\234\001\002\000\020\006\005\023\016" +
    "\043\006\044\027\045\031\053\004\054\022\001\002\000" +
    "\052\004\223\005\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\024\uffd1\025\222\026\uffd1\030\uffd1\031\220\032\uffd1" +
    "\033\uffd1\001\002\000\004\043\uffea\001\002\000\004\023" +
    "\uffdb\001\002\000\004\043\uffe8\001\002\000\044\006\ufffb" +
    "\023\ufffb\027\ufffb\034\ufffb\036\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\001\002\000\014\005\035\006" +
    "\037\010\040\011\036\033\205\001\002\000\004\043\150" +
    "\001\002\000\004\023\172\001\002\000\026\006\005\023" +
    "\016\043\006\044\027\045\031\047\054\050\060\051\057" +
    "\053\004\054\022\001\002\000\044\006\uffdb\023\uffdb\027" +
    "\uffdb\034\uffdb\036\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053" +
    "\uffdb\054\uffdb\001\002\000\006\032\145\033\146\001\002" +
    "\000\004\043\uffe7\001\002\000\006\046\uffc7\054\uffc7\001" +
    "\002\000\004\043\uffe9\001\002\000\046\002\140\006\005" +
    "\023\016\027\012\034\026\036\015\040\017\041\010\042" +
    "\030\043\006\044\027\045\031\047\007\050\023\051\011" +
    "\052\021\053\004\054\022\001\002\000\050\002\001\006" +
    "\001\023\001\027\001\030\001\034\001\036\001\040\001" +
    "\041\001\042\001\043\001\044\001\045\001\047\001\050" +
    "\001\051\001\052\001\053\001\054\001\001\002\000\004" +
    "\023\123\001\002\000\044\005\uffcf\006\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\024\uffcf\026\uffcf\030\uffcf\032\uffcf\033" +
    "\uffcf\001\002\000\004\023\032\001\002\000\044\005\uffce" +
    "\006\uffce\010\uffce\011\uffce\012\uffce\013\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce\026\uffce" +
    "\030\uffce\032\uffce\033\uffce\001\002\000\022\006\005\023" +
    "\016\033\uffdd\043\006\044\027\045\031\053\004\054\022" +
    "\001\002\000\004\033\045\001\002\000\016\005\035\006" +
    "\037\010\040\011\036\024\uffdc\033\uffdc\001\002\000\020" +
    "\006\005\023\016\043\006\044\027\045\031\053\004\054" +
    "\022\001\002\000\020\006\005\023\016\043\006\044\027" +
    "\045\031\053\004\054\022\001\002\000\020\006\005\023" +
    "\016\043\006\044\027\045\031\053\004\054\022\001\002" +
    "\000\020\006\005\023\016\043\006\044\027\045\031\053" +
    "\004\054\022\001\002\000\044\005\uffd8\006\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\024\uffd8\026\uffd8\030\uffd8\032\uffd8" +
    "\033\uffd8\001\002\000\044\005\uffd9\006\uffd9\010\040\011" +
    "\036\012\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\024\uffd9\026\uffd9\030\uffd9\032\uffd9\033" +
    "\uffd9\001\002\000\044\005\uffd7\006\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\024\uffd7\026\uffd7\030\uffd7\032\uffd7\033\uffd7" +
    "\001\002\000\044\005\uffda\006\uffda\010\040\011\036\012" +
    "\uffda\013\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\024\uffda\026\uffda\030\uffda\032\uffda\033\uffda\001" +
    "\002\000\022\006\uffdb\014\uffdb\023\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\053\uffdb\054\uffdb\001\002\000\022\006\ufff1\014" +
    "\ufff1\023\ufff1\043\ufff1\044\ufff1\045\ufff1\053\ufff1\054\ufff1" +
    "\001\002\000\022\006\005\014\050\023\053\043\006\044" +
    "\027\045\031\053\004\054\022\001\002\000\022\006\005" +
    "\014\050\023\053\043\006\044\027\045\031\053\004\054" +
    "\022\001\002\000\026\005\035\006\037\010\040\011\036" +
    "\015\100\016\101\017\075\020\077\021\102\022\076\001" +
    "\002\000\010\012\067\013\065\033\113\001\002\000\030" +
    "\006\005\014\050\023\053\043\006\044\027\045\031\047" +
    "\054\050\060\051\057\053\004\054\022\001\002\000\004" +
    "\024\111\001\002\000\030\005\035\006\037\010\040\011" +
    "\036\015\100\016\101\017\075\020\077\021\102\022\076" +
    "\024\074\001\002\000\010\012\067\013\065\024\066\001" +
    "\002\000\004\024\063\001\002\000\004\024\061\001\002" +
    "\000\020\006\005\023\016\043\006\044\027\045\031\053" +
    "\004\054\022\001\002\000\044\005\uffca\006\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\015\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\024\uffca\026\uffca\030\uffca\032\uffca" +
    "\033\uffca\001\002\000\020\006\005\023\016\043\006\044" +
    "\027\045\031\053\004\054\022\001\002\000\044\005\uffc9" +
    "\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\026\uffc9" +
    "\030\uffc9\032\uffc9\033\uffc9\001\002\000\022\006\uffb9\014" +
    "\uffb9\023\uffb9\043\uffb9\044\uffb9\045\uffb9\053\uffb9\054\uffb9" +
    "\001\002\000\012\012\uffb7\013\uffb7\024\uffb7\033\uffb7\001" +
    "\002\000\022\006\uffbb\014\uffbb\023\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\053\uffbb\054\uffbb\001\002\000\022\006\005\014" +
    "\050\023\053\043\006\044\027\045\031\053\004\054\022" +
    "\001\002\000\012\012\uffba\013\uffba\024\uffba\033\uffba\001" +
    "\002\000\022\006\005\014\050\023\053\043\006\044\027" +
    "\045\031\053\004\054\022\001\002\000\012\012\067\013" +
    "\uffb8\024\uffb8\033\uffb8\001\002\000\044\005\uffd5\006\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\024\uffd5\026\uffd5\030\uffd5" +
    "\032\uffd5\033\uffd5\001\002\000\020\006\005\023\016\043" +
    "\006\044\027\045\031\053\004\054\022\001\002\000\020" +
    "\006\005\023\016\043\006\044\027\045\031\053\004\054" +
    "\022\001\002\000\020\006\005\023\016\043\006\044\027" +
    "\045\031\053\004\054\022\001\002\000\020\006\005\023" +
    "\016\043\006\044\027\045\031\053\004\054\022\001\002" +
    "\000\020\006\005\023\016\043\006\044\027\045\031\053" +
    "\004\054\022\001\002\000\020\006\005\023\016\043\006" +
    "\044\027\045\031\053\004\054\022\001\002\000\022\005" +
    "\035\006\037\010\040\011\036\012\uffbf\013\uffbf\024\uffbf" +
    "\033\uffbf\001\002\000\022\005\035\006\037\010\040\011" +
    "\036\012\uffc1\013\uffc1\024\uffc1\033\uffc1\001\002\000\022" +
    "\005\035\006\037\010\040\011\036\012\uffc2\013\uffc2\024" +
    "\uffc2\033\uffc2\001\002\000\022\005\035\006\037\010\040" +
    "\011\036\012\uffbe\013\uffbe\024\uffbe\033\uffbe\001\002\000" +
    "\022\005\035\006\037\010\040\011\036\012\uffbd\013\uffbd" +
    "\024\uffbd\033\uffbd\001\002\000\022\005\035\006\037\010" +
    "\040\011\036\012\uffc0\013\uffc0\024\uffc0\033\uffc0\001\002" +
    "\000\020\006\005\023\016\043\006\044\027\045\031\053" +
    "\004\054\022\001\002\000\044\005\uffcb\006\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\024\uffcb\026\uffcb\030\uffcb\032\uffcb" +
    "\033\uffcb\001\002\000\022\006\uffdb\023\uffdb\024\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\053\uffdb\054\uffdb\001\002\000\022" +
    "\006\ufff0\023\ufff0\024\ufff0\043\ufff0\044\ufff0\045\ufff0\053" +
    "\ufff0\054\ufff0\001\002\000\022\006\005\023\016\024\uffdd" +
    "\043\006\044\027\045\031\053\004\054\022\001\002\000" +
    "\004\024\117\001\002\000\044\006\uffef\023\uffef\027\uffef" +
    "\034\uffef\036\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044" +
    "\uffef\045\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\001\002\000\044\006\005\023\016\027\012\034" +
    "\026\036\015\040\017\041\010\042\030\043\006\044\027" +
    "\045\031\047\007\050\023\051\011\052\021\053\004\054" +
    "\022\001\002\000\052\002\uffee\006\uffee\023\uffee\027\uffee" +
    "\030\uffee\034\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\044\uffee\045\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\054\uffee\001\002\000\012\012\uffbc\013" +
    "\uffbc\024\uffbc\033\uffbc\001\002\000\022\006\005\023\016" +
    "\027\125\043\006\044\027\045\031\053\004\054\022\001" +
    "\002\000\004\024\136\001\002\000\020\006\005\023\016" +
    "\043\006\044\027\045\031\053\004\054\022\001\002\000" +
    "\014\005\035\006\037\010\040\011\036\024\127\001\002" +
    "\000\004\033\130\001\002\000\052\002\ufffd\006\ufffd\023" +
    "\ufffd\027\ufffd\030\ufffd\034\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\001\002\000\006" +
    "\030\134\032\133\001\002\000\016\005\035\006\037\010" +
    "\040\011\036\030\uffc4\032\uffc4\001\002\000\020\006\005" +
    "\023\016\043\006\044\027\045\031\053\004\054\022\001" +
    "\002\000\044\005\uffc5\006\uffc5\010\uffc5\011\uffc5\012\uffc5" +
    "\013\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\024\uffc5\026\uffc5\030\uffc5\032\uffc5\033\uffc5\001\002" +
    "\000\016\005\035\006\037\010\040\011\036\030\uffc3\032" +
    "\uffc3\001\002\000\004\033\137\001\002\000\052\002\ufffc" +
    "\006\ufffc\023\ufffc\027\ufffc\030\ufffc\034\ufffc\036\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\001" +
    "\002\000\004\002\000\001\002\000\050\002\uffff\006\uffff" +
    "\023\uffff\027\uffff\030\uffff\034\uffff\036\uffff\040\uffff\041" +
    "\uffff\042\uffff\043\uffff\044\uffff\045\uffff\047\uffff\050\uffff" +
    "\051\uffff\052\uffff\053\uffff\054\uffff\001\002\000\006\046" +
    "\143\054\144\001\002\000\006\046\uffc6\054\uffc6\001\002" +
    "\000\044\005\uffcc\006\uffcc\010\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\024\uffcc\026\uffcc\030\uffcc\032\uffcc\033\uffcc\001\002\000" +
    "\004\043\150\001\002\000\052\002\uffed\006\uffed\023\uffed" +
    "\027\uffed\030\uffed\034\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\001\002\000\006\032" +
    "\uffeb\033\uffeb\001\002\000\012\004\uffe3\025\156\032\uffe3" +
    "\033\uffe3\001\002\000\010\004\152\032\uffe6\033\uffe6\001" +
    "\002\000\022\006\005\023\016\027\125\043\006\044\027" +
    "\045\031\053\004\054\022\001\002\000\006\032\uffe4\033" +
    "\uffe4\001\002\000\016\005\035\006\037\010\040\011\036" +
    "\032\uffe5\033\uffe5\001\002\000\010\004\uffe2\032\uffe2\033" +
    "\uffe2\001\002\000\004\044\157\001\002\000\004\026\160" +
    "\001\002\000\010\004\uffe1\032\uffe1\033\uffe1\001\002\000" +
    "\044\006\ufff3\023\ufff3\027\ufff3\034\ufff3\036\ufff3\040\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\001\002\000\044" +
    "\006\005\023\016\027\012\034\026\036\015\040\017\041" +
    "\010\042\030\043\006\044\027\045\031\047\007\050\023" +
    "\051\011\052\021\053\004\054\022\001\002\000\004\041" +
    "\164\001\002\000\004\023\165\001\002\000\022\006\005" +
    "\014\050\023\053\043\006\044\027\045\031\053\004\054" +
    "\022\001\002\000\010\012\067\013\065\024\167\001\002" +
    "\000\004\033\170\001\002\000\052\002\ufff2\006\ufff2\023" +
    "\ufff2\027\ufff2\030\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\047\ufff2\050" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\001\002\000\014" +
    "\005\035\006\037\010\040\011\036\024\074\001\002\000" +
    "\022\006\005\014\050\023\053\043\006\044\027\045\031" +
    "\053\004\054\022\001\002\000\010\012\067\013\065\024" +
    "\174\001\002\000\044\006\uffdb\023\uffdb\027\uffdb\034\uffdb" +
    "\036\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\001\002\000\044\006\ufff9\023\ufff9\027\ufff9\034\ufff9\036" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\001" +
    "\002\000\044\006\005\023\016\027\012\034\026\036\015" +
    "\040\017\041\010\042\030\043\006\044\027\045\031\047" +
    "\007\050\023\051\011\052\021\053\004\054\022\001\002" +
    "\000\052\002\ufff8\006\ufff8\023\ufff8\027\ufff8\030\ufff8\034" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\054\ufff8\001\002\000\052\002\uffdf\006\uffdf\023\uffdf" +
    "\027\uffdf\030\uffdf\034\uffdf\036\uffdf\037\201\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\054\uffdf\001\002\000\044\006" +
    "\005\023\016\027\012\034\026\036\015\040\017\041\010" +
    "\042\030\043\006\044\027\045\031\047\007\050\023\051" +
    "\011\052\021\053\004\054\022\001\002\000\052\002\ufff7" +
    "\006\ufff7\023\ufff7\027\ufff7\030\ufff7\034\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\001" +
    "\002\000\052\002\uffde\006\uffde\023\uffde\027\uffde\030\uffde" +
    "\034\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\047\uffde\050\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\001\002\000\006\032\uffec\033\uffec\001" +
    "\002\000\052\002\ufffe\006\ufffe\023\ufffe\027\ufffe\030\ufffe" +
    "\034\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\001\002\000\044\006\005\023\016\027" +
    "\012\034\026\036\015\040\017\041\010\042\030\043\006" +
    "\044\027\045\031\047\007\050\023\051\011\052\021\053" +
    "\004\054\022\001\002\000\046\006\005\023\016\027\012" +
    "\030\210\034\026\036\015\040\017\041\010\042\030\043" +
    "\006\044\027\045\031\047\007\050\023\051\011\052\021" +
    "\053\004\054\022\001\002\000\052\002\ufffa\006\ufffa\023" +
    "\ufffa\027\ufffa\030\ufffa\034\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\001\002\000\004" +
    "\023\ufff6\001\002\000\004\023\213\001\002\000\022\006" +
    "\005\014\050\023\053\043\006\044\027\045\031\053\004" +
    "\054\022\001\002\000\010\012\067\013\065\024\215\001" +
    "\002\000\044\006\ufff5\023\ufff5\027\ufff5\034\ufff5\036\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\001\002" +
    "\000\044\006\005\023\016\027\012\034\026\036\015\040" +
    "\017\041\010\042\030\043\006\044\027\045\031\047\007" +
    "\050\023\051\011\052\021\053\004\054\022\001\002\000" +
    "\052\002\ufff4\006\ufff4\023\ufff4\027\ufff4\030\ufff4\034\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\001\002\000\004\035\232\001\002\000\046\004" +
    "\230\005\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024" +
    "\uffd0\026\uffd0\030\uffd0\032\uffd0\033\uffd0\001\002\000\020" +
    "\006\005\023\016\043\006\044\027\045\031\053\004\054" +
    "\022\001\002\000\022\006\005\023\016\027\125\043\006" +
    "\044\027\045\031\053\004\054\022\001\002\000\044\005" +
    "\uffd3\006\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3\026" +
    "\uffd3\030\uffd3\032\uffd3\033\uffd3\001\002\000\044\005\035" +
    "\006\037\010\040\011\036\012\uffd4\013\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\026\uffd4" +
    "\030\uffd4\032\uffd4\033\uffd4\001\002\000\014\005\035\006" +
    "\037\010\040\011\036\026\227\001\002\000\046\004\uffe0" +
    "\005\uffe0\006\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0" +
    "\026\uffe0\030\uffe0\032\uffe0\033\uffe0\001\002\000\020\006" +
    "\005\023\016\043\006\044\027\045\031\053\004\054\022" +
    "\001\002\000\044\005\035\006\037\010\040\011\036\012" +
    "\uffd2\013\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\024\uffd2\026\uffd2\030\uffd2\032\uffd2\033\uffd2\001" +
    "\002\000\044\005\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\024\uffc8\026\uffc8\030\uffc8\032\uffc8\033\uffc8\001\002" +
    "\000\044\005\uffd6\006\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\024\uffd6\026\uffd6\030\uffd6\032\uffd6\033\uffd6\001\002\000" +
    "\004\053\235\001\002\000\044\005\uffcd\006\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\024\uffcd\026\uffcd\030\uffcd\032\uffcd" +
    "\033\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\014\002\023\003\024\004\012\011\017\012" +
    "\013\001\001\000\002\001\001\000\004\004\232\001\001" +
    "\000\004\016\220\001\001\000\002\001\001\000\004\010" +
    "\210\001\001\000\002\001\001\000\004\022\205\001\001" +
    "\000\002\001\001\000\006\013\203\014\150\001\001\000" +
    "\002\001\001\000\004\004\170\001\001\000\004\010\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\141\001\001\000\002\001\001\000\012\003\140\004\012" +
    "\011\017\012\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\033\005\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\043\001\001\000\004\004\042" +
    "\001\001\000\004\004\041\001\001\000\004\004\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\045\001\001\000\004\030" +
    "\046\001\001\000\006\004\050\006\051\001\001\000\006" +
    "\004\050\006\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\054\006\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\061\001\001\000\002\001\001" +
    "\000\004\004\063\001\001\000\002\001\001\000\004\034" +
    "\071\001\001\000\002\001\001\000\004\033\067\001\001" +
    "\000\006\004\050\006\070\001\001\000\002\001\001\000" +
    "\006\004\050\006\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\107\001\001\000\004\004\106\001" +
    "\001\000\004\004\105\001\001\000\004\004\104\001\001" +
    "\000\004\004\103\001\001\000\004\004\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\111\001\001\000\002\001\001\000\004\010\113\001\001" +
    "\000\004\031\114\001\001\000\006\004\033\005\115\001" +
    "\001\000\002\001\001\000\004\032\117\001\001\000\012" +
    "\003\120\004\012\011\017\012\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\125\017\123\001\001" +
    "\000\002\001\001\000\006\004\131\020\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\146" +
    "\014\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\154\001\001\000\002\001\001\000\006\004\153" +
    "\017\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\161\001\001\000\012\003\162\004" +
    "\012\011\017\012\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\050\006\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\050\006\172\001\001\000\002\001\001\000" +
    "\004\010\174\001\001\000\004\023\175\001\001\000\012" +
    "\003\176\004\012\011\017\012\013\001\001\000\004\024" +
    "\177\001\001\000\004\007\201\001\001\000\012\003\202" +
    "\004\012\011\017\012\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\206\003\024\004\012\011\017\012\013\001\001\000" +
    "\012\003\140\004\012\011\017\012\013\001\001\000\002" +
    "\001\001\000\004\025\211\001\001\000\002\001\001\000" +
    "\006\004\050\006\213\001\001\000\002\001\001\000\004" +
    "\026\215\001\001\000\012\003\216\004\012\011\017\012" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\225\001\001\000\006\004\224\017" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	String tab = "   ";
	TablaSimbolos tabla = new TablaSimbolos();

	Tipado tipo;

	int length = 0;

	class ParEtiquetas {
		public String eV, eF;
		public ParEtiquetas(String eV, String eF){
			this.eV = eV;
			this.eF = eF;
		}
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Lista_de_sent ::= Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Lista_de_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sentencia ::= Expresion PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		e1.metodosInstancia(tabla, Metodos.PRINT, null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= PRINT AP ArrayConstante CP PYC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		e1.metodosInstancia(tabla, Metodos.PRINT, null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              String RESULT =null;

		tabla.getAmbito().entrarBloque();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= ALL NT$0 Lista_de_sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		int bloque = tabla.getAmbito().getBloque();
		tabla.borrarAmbito(bloque);
		tabla.getAmbito().salirBloque();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParEtiquetas c = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eS = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		PLXC.out.printf("%s:\n", c.eV);			// VERDADERO
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParEtiquetas c = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String eS = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

		PLXC.out.printf(tab+"goto %s;\n", eS);	// SALTO A SALIDA
		PLXC.out.printf("%s:\n", c.eF);			// FALSO
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= IF AP Condicion CP Etiqueta NT$1 Sentencia NT$2 IfElse 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParEtiquetas c = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String eS = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
		PLXC.out.printf("%s:\n", eS);			// SALIDA
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              String RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		PLXC.out.printf("%s:\n", eI);			// INICIO
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String eI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEtiquetas c = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

		PLXC.out.printf("%s:\n", c.eV);			// VERDADERO
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= WHILE Etiqueta NT$3 AP Condicion CP NT$4 Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String eI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEtiquetas c = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
		PLXC.out.printf(tab+"goto %s;\n", eI);	// VUELTA A CONDICION
		PLXC.out.printf("%s:\n", c.eF);			// FALSO -> SALIDA
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$5 ::= 
            {
              String RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		PLXC.out.printf("%s:\n", eI);			// INICIO
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sentencia ::= DO Etiqueta NT$5 Sentencia WHILE AP Condicion CP PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String eI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParEtiquetas c = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		PLXC.out.printf("%s:\n", c.eV);			// VERDADERO
		PLXC.out.printf(tab+"goto %s;\n", eI);	// VUELTA A CONDICION
		PLXC.out.printf("%s:\n", c.eF);			// FALSO -> SALIDA
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$6 ::= 
            {
              String RESULT =null;
		int eCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eC = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		PLXC.out.printf("%s:\n", eC);			// CONDICION
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String eC = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParEtiquetas c = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eA = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		PLXC.out.printf("%s:\n", eA);			// ACTUALIZAR
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String eC = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEtiquetas c = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String eA = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

		PLXC.out.printf(tab+"goto %s;\n", eC);	// VUELTA A CODICION
		PLXC.out.printf("%s:\n", c.eV);			// VERDADERO
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= FOR AP ExpresionEpsilon PYC Etiqueta NT$6 Condicion PYC Etiqueta NT$7 ExpresionEpsilon CP NT$8 Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String eC = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParEtiquetas c = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String eA = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
		PLXC.out.printf(tab+"goto %s;\n", eA);	// VUELTA A ACTUALIZAR
		PLXC.out.printf("%s:\n", c.eF);			// FALSO -> SALIDA
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= DeclararVariables PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DeclararVariables ::= Tipo Inicializacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclararVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DeclararVariables ::= DeclararVariables COMA Inicializacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclararVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= INT 
            {
              String RESULT =null;
		 tipo = Tipado.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= FLOAT 
            {
              String RESULT =null;
		 tipo = Tipado.FLOAT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= CHAR 
            {
              String RESULT =null;
		 tipo = Tipado.CHAR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= STRING 
            {
              String RESULT =null;
		 tipo = Tipado.STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Inicializacion ::= Declaracion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicializacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Inicializacion ::= Declaracion ASIG Expresion 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto var = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Objeto o = tabla.obtenerVariable(var.toString());
		Vector<Objeto> v = new Vector<>();
		v.add(e);
		o.metodosInstancia(tabla, Metodos.ASIGNACION, v);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicializacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Inicializacion ::= Declaracion ASIG ArrayConstante 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto var = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Objeto o = tabla.obtenerVariable(var.toString());
		Vector<Objeto> v = new Vector<>();
		v.add(a);
		o.metodosInstancia(tabla, Metodos.ASIGNACION, v);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicializacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Declaracion ::= IDENT 
            {
              Objeto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Objeto o = null;
		switch (tipo) {
			case INT:
				o = new ObjetoInt(nombre, tabla.getAmbito().getBloque(), Valor.VARIABLE);
				break;
			case FLOAT:
				o = new ObjetoFloat(nombre, tabla.getAmbito().getBloque(), Valor.VARIABLE);
				break;
			case CHAR:
				o = new ObjetoChar(nombre, tabla.getAmbito().getBloque(), Valor.VARIABLE);
				break;
			case STRING:
				o = new ObjetoString(nombre, tabla.getAmbito().getBloque(), Valor.VARIABLE);
				break;
		}
		tabla.declararVariable(o);
		
		RESULT = tabla.obtenerVariable(nombre);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Declaracion ::= IDENT ArrayDefinicion 
            {
              Objeto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Objeto o = null;
		int dimension = Integer.parseInt(a);
		switch (tipo) {
			case INT:
				o = new ObjetoArrayInt(nombre, tabla.getAmbito().getBloque(), dimension, Valor.VARIABLE);
				break;
			case FLOAT:
				o = new ObjetoArrayFloat(nombre, tabla.getAmbito().getBloque(), dimension, Valor.VARIABLE);
				break;
			case CHAR:
				o = new ObjetoArrayChar(nombre, tabla.getAmbito().getBloque(), dimension, Valor.VARIABLE);
				break;
		}
		tabla.declararVariable(o);

		Objeto res = tabla.obtenerVariable(nombre);
		
		res.metodosInstancia(tabla, Metodos.DEFINIR_LENGTH, null);

		RESULT = res;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ArrayDefinicion ::= AC ENTERO CC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = e;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayDefinicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Array ::= AC Expresion CC 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if (e.getTipo() != Tipado.INT) {
			PLXC.out.println("# ERROR: El indice de un array debe ser entero");
			PLXC.out.println("   error;");
			PLXC.out.println("   halt;");
			System.exit(0);
		}
		RESULT = e;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Array",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IfElse ::= 
            {
              String RESULT =null;
		 /*Epsilon*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfElse",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IfElse ::= ELSE Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfElse",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpresionEpsilon ::= 
            {
              Objeto RESULT =null;
		 /*Epsiolon*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionEpsilon",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpresionEpsilon ::= Expresion 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionEpsilon",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Etiqueta ::= 
            {
              String RESULT =null;
		 RESULT = tabla.getEtiqueta(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Etiqueta",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= Expresion MAS Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Vector<Objeto> v = new Vector<>();
		v.add(e2);
		RESULT = e1.metodosInstancia(tabla, Metodos.SUMA, v);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= Expresion MENOS Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Vector<Objeto> v = new Vector<>();
		v.add(e2);
		RESULT = e1.metodosInstancia(tabla, Metodos.RESTA, v);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= Expresion POR Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Vector<Objeto> v = new Vector<>();
		v.add(e2);
		RESULT = e1.metodosInstancia(tabla, Metodos.MULTIPLICACION, v);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= Expresion ENTRE Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Vector<Objeto> v = new Vector<>();
		v.add(e2);
		RESULT = e1.metodosInstancia(tabla, Metodos.DIVISION, v);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= MENOS Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = e1.metodosInstancia(tabla, Metodos.MENOSUNARIO, null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= AP Expresion CP 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = e1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= IDENT ASIG Expresion 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Objeto variable = tabla.obtenerVariable(i);
		
		Vector<Objeto> v = new Vector<>();
		v.add(e);
		RESULT = variable.metodosInstancia(tabla, Metodos.ASIGNACION, v);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= IDENT ASIG ArrayConstante 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Objeto variable = tabla.obtenerVariable(i);
		
		Vector<Objeto> v = new Vector<>();
		v.add(a);
		RESULT = variable.metodosInstancia(tabla, Metodos.ASIGNACION, v);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= IDENT Array ASIG Expresion 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto indice = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Objeto variable = tabla.obtenerVariable(i);

		Vector<Objeto> v = new Vector<>();
		
		v.add(indice);
		variable.metodosInstancia(tabla, Metodos.COMPROBAR_DIMENSION, v);

		v.add(e);

		RESULT = variable.metodosInstancia(tabla, Metodos.ASIGNACION_INDICE, v);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= IDENT 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Objeto variable = tabla.obtenerVariable(i);

		RESULT = variable;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= IDENT Array 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto indice = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Objeto variable = tabla.obtenerVariable(i);

		Vector<Objeto> v = new Vector<>();
		v.add(indice);
		variable.metodosInstancia(tabla, Metodos.COMPROBAR_DIMENSION, v);
		variable = variable.metodosInstancia(tabla, Metodos.DEVOLVER_ARRAY, v);
		
		RESULT = variable;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= ENTERO 
            {
              Objeto RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		String nombre = n;
		int bloque = tabla.getAmbito().getBloque();
		Valor valor = Valor.CONSTANTE;
		RESULT = new ObjetoInt(nombre, bloque, valor);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= REAL 
            {
              Objeto RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		String nombre = r;
		int bloque = tabla.getAmbito().getBloque();
		Valor valor = Valor.CONSTANTE;
		RESULT = new ObjetoFloat(nombre, bloque, valor);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= COMILLA_SIMPLE ASCII COMILLA_SIMPLE 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = new ObjetoChar(c, tabla.getAmbito().getBloque(), Valor.CONSTANTE);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= COMILLA_DOBLE ListaCaracteres COMILLA_DOBLE 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto l = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		l.metodosInstancia(tabla, Metodos.LENGTH_CONSTANTE, null);

		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= AP INT CP Expresion 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = e.metodosInstancia(tabla, Metodos.CAST_INT, null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= AP FLOAT CP Expresion 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = e.metodosInstancia(tabla, Metodos.CAST_FLOAT, null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= AP CHAR CP Expresion 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = e.metodosInstancia(tabla, Metodos.CAST_CHAR, null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion ::= IDENT PUNTO LENGTH 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		Objeto variable = tabla.obtenerVariable(i);
		RESULT = variable.metodosInstancia(tabla, Metodos.MOSTRAR_LENGTH, null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListaCaracteres ::= 
            {
              Objeto RESULT =null;
		 /* EPSILON */
		RESULT = new ObjetoString(tabla.getTemporal(), tabla.getAmbito().getBloque(), Valor.TEMPORAL);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaCaracteres",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListaCaracteres ::= ListaCaracteres ASCII 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto l = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Vector<Objeto> v = new Vector<>();
		Objeto ch = new ObjetoChar(c, tabla.getAmbito().getBloque(), Valor.CONSTANTE);
		v.add(ch);
		l.metodosInstancia(tabla, Metodos.STRING_CONSTANTE, v);

		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaCaracteres",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ArrayConstante ::= ALL ListaConstante CLL 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto l = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayConstante",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListaConstante ::= Expresion 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Objeto constante = null;
		switch (e.getTipo()) {
			case INT:
				constante = new ObjetoArrayInt(tabla.getTemporal(), tabla.getAmbito().getBloque(), 1, Valor.CONSTANTE);
				break;
			case FLOAT:
				constante = new ObjetoArrayFloat(tabla.getTemporal(), tabla.getAmbito().getBloque(), 1, Valor.CONSTANTE);
				break;
			case CHAR:
				constante = new ObjetoArrayChar(tabla.getTemporal(), tabla.getAmbito().getBloque(), 1, Valor.CONSTANTE);
				break;
			default:
				PLXC.out.println("# ERROR: El tipo "+e.getTipo().name()+" no se puede asignar a una lista constante.");
				PLXC.out.println("   error;");
				PLXC.out.println("   halt;");
				System.exit(0);
				break;
		}
		PLXC.out.println("   "+constante+"["+(((ObjetoArray) constante).getDimension()-1)+"] = "+e+";");
		RESULT = constante;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListaConstante ::= ListaConstante COMA Expresion 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto l = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Objeto constante = null;
		switch (l.getTipo()) {
			case ARRAY_INT: {
					switch (e.getTipo()) {
						case INT:
							constante = new ObjetoArrayInt(l.getNombre(), l.getAmbito(), ((ObjetoArray) l).getDimension() + 1, Valor.CONSTANTE);
							break;
						default:
							PLXC.out.println("# ERROR: El tipo "+e.getTipo().name()+" no se puede asignar a una lista constante de tipo "+l.getTipo().name());
							PLXC.out.println("   error;");
							PLXC.out.println("   halt;");
							System.exit(0);
							break;
					}
				}
				break;
			case ARRAY_FLOAT: {
					switch (e.getTipo()) {
						case FLOAT:
							constante = new ObjetoArrayFloat(l.getNombre(), l.getAmbito(), ((ObjetoArray) l).getDimension() + 1, Valor.CONSTANTE);
							break;
						default:
							PLXC.out.println("# ERROR: El tipo "+e.getTipo().name()+" no se puede asignar a una lista constante de tipo "+l.getTipo().name());
							PLXC.out.println("   error;");
							PLXC.out.println("   halt;");
							System.exit(0);
							break;
					}
				}
				break;
			case ARRAY_CHAR: {
					switch (e.getTipo()) {
						case CHAR:
							constante = new ObjetoArrayChar(l.getNombre(), l.getAmbito(), ((ObjetoArray) l).getDimension() + 1, Valor.CONSTANTE);
							break;
						default:
							PLXC.out.println("# ERROR: El tipo "+e.getTipo().name()+" no se puede asignar a una lista constante de tipo "+l.getTipo().name());
							PLXC.out.println("   error;");
							PLXC.out.println("   halt;");
							System.exit(0);
							break;
					}
				}
				break;
			default:
				PLXC.out.println("# ERROR: El tipo "+l.getTipo().name()+" no se esta permitido para una lista constante.");
				PLXC.out.println("   error;");
				PLXC.out.println("   halt;");
				System.exit(0);
				break;
		}
		PLXC.out.println("   "+constante+"["+(((ObjetoArray) constante).getDimension()-1)+"] = "+e+";");
		RESULT = constante;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Condicion ::= Expresion IGUAL Expresion 
            {
              ParEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ParEtiquetas pe = new ParEtiquetas(tabla.getEtiqueta(), tabla.getEtiqueta());
		PLXC.out.printf(tab+"if (%s == %s) goto %s;\n", e1, e2, pe.eV);
		PLXC.out.printf(tab+"goto %s;\n", pe.eF);
		RESULT = pe;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Condicion ::= Expresion DIFERENTE Expresion 
            {
              ParEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ParEtiquetas pe = new ParEtiquetas(tabla.getEtiqueta(), tabla.getEtiqueta());
		PLXC.out.printf(tab+"if (%s == %s) goto %s;\n", e1, e2, pe.eF);
		PLXC.out.printf(tab+"goto %s;\n", pe.eV);
		RESULT = pe;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Condicion ::= Expresion MENOR Expresion 
            {
              ParEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ParEtiquetas pe = new ParEtiquetas(tabla.getEtiqueta(), tabla.getEtiqueta());
		PLXC.out.printf(tab+"if (%s < %s) goto %s;\n", e1, e2, pe.eV);
		PLXC.out.printf(tab+"goto %s;\n", pe.eF);
		RESULT = pe;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Condicion ::= Expresion MENOR_IGUAL Expresion 
            {
              ParEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ParEtiquetas pe = new ParEtiquetas(tabla.getEtiqueta(), tabla.getEtiqueta());
		PLXC.out.printf(tab+"if (%s < %s) goto %s;\n", e2, e1, pe.eF);
		PLXC.out.printf(tab+"goto %s;\n", pe.eV);
		RESULT = pe;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Condicion ::= Expresion MAYOR Expresion 
            {
              ParEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ParEtiquetas pe = new ParEtiquetas(tabla.getEtiqueta(), tabla.getEtiqueta());
		PLXC.out.printf(tab+"if (%s < %s) goto %s;\n", e2, e1, pe.eV);
		PLXC.out.printf(tab+"goto %s;\n", pe.eF);
		RESULT = pe;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= Expresion MAYOR_IGUAL Expresion 
            {
              ParEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ParEtiquetas pe = new ParEtiquetas(tabla.getEtiqueta(), tabla.getEtiqueta());
		PLXC.out.printf(tab+"if (%s < %s) goto %s;\n", e1, e2, pe.eF);
		PLXC.out.printf(tab+"goto %s;\n", pe.eV);
		RESULT = pe;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Condicion ::= NEGADO Condicion 
            {
              ParEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEtiquetas c = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ParEtiquetas pe = new ParEtiquetas(c.eF, c.eV);
		RESULT = pe;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$9 ::= 
            {
              ParEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEtiquetas c1 = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

		PLXC.out.printf("%s:\n", c1.eV);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Condicion ::= Condicion Y NT$9 Condicion 
            {
              ParEtiquetas RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (ParEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEtiquetas c1 = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEtiquetas c2 = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		PLXC.out.printf("%s:\n", c1.eF);
		PLXC.out.printf(tab+"goto %s;\n", c2.eF);
		RESULT = c2;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$10 ::= 
            {
              ParEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEtiquetas c1 = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

		PLXC.out.printf("%s:\n", c1.eF);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Condicion ::= Condicion O NT$10 Condicion 
            {
              ParEtiquetas RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (ParEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEtiquetas c1 = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEtiquetas c2 = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		PLXC.out.printf("%s:\n", c1.eV);
		PLXC.out.printf(tab+"goto %s;\n", c2.eV);
		RESULT = c2;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion ::= AP Condicion CP 
            {
              ParEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEtiquetas c = (ParEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = c;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
