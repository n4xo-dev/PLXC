import java_cup.runtime.*;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;

parser code {:
	public void syntax_error(Symbol cur_token){
    PLXC.out.println("# ERROR: Syntax error at token " + cur_token.value);
    PLXC.out.print("   error;\n   halt;\n");
    System.exit(0);
    report_error("Syntax error", null);
    done_parsing();
	}

	// public void unrecovered_syntax_error(Symbol cur_token){
	// 	System.err.println("Syntax error");
  //   PLXC.out.print("   error;\n   halt;\n");
	// 	// report_error("Syntax error", null);
	// 	done_parsing();
	// }
:};

action code {:
  AST ast = new AST();
:}

// Terminales
terminal String SEMICOLON, COMA;
terminal String O_PAR, C_PAR, O_CURL, C_CURL, O_BRACK, C_BRACK;
terminal String PLUS, MINUS, MULT, DIV, MOD, MINUS_SIGN;
terminal String PLUS_PLUS, MINUS_MINUS;
terminal String PLUS_EQ, MINUS_EQ, MULT_EQ, DIV_EQ, MOD_EQ;
terminal String ASSIGN, EQ, NEQ, GT, LT, GTE, LTE;
terminal String AND, OR, NOT, AMPERSAND;
terminal String QUESTION, COLON, ELVIS;
terminal String DOT;
terminal String IF, ELSE, SWITCH, CASE, DEFAULT, WHILE, FOR, DO, BREAK, CONTINUE, RETURN;
terminal String INT, FLOAT, CHAR, STRING;
terminal String CAST_INT, CAST_FLOAT, CAST_CHAR;
terminal String ID, INT_CONST, FLOAT_CONST, CHAR_CONST, STRING_CONST;
terminal String PRINT;
terminal String LENGTH;

// No-Terminales
non terminal AST.Program Program;
non terminal AST.SentenceList sentenceList;
non terminal AST.Node sentence;
non terminal AST.DeclarationList declarationList;
non terminal AST.Expression expression;
non terminal AST.Expression arithmetic;
non terminal AST.ArrayLiteralList arrayList;
non terminal AST.Condition condition;
non terminal Type type;

// Precedencias
precedence left IF;
precedence left ELSE;
precedence left ASSIGN;
precedence left ELVIS;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence left NEQ, GT, LT, GTE, LTE;
precedence left OR;
precedence left AND;
precedence left NOT, AMPERSAND;
precedence left PLUS_PLUS, MINUS_MINUS;
precedence left PLUS_EQ, MINUS_EQ, MULT_EQ, DIV_EQ, MOD_EQ;
precedence nonassoc MINUS_SIGN;
precedence nonassoc O_PAR, C_PAR;
precedence nonassoc CAST_INT, CAST_FLOAT, CAST_CHAR;
precedence nonassoc O_BRACK, C_BRACK;


// GramÃ¡tica
Program ::= sentenceList:sl {:
    PLXC.out.print(ast.new Program(sl).gen());
  :}
  ;

sentenceList ::= sentence:s {:
    RESULT = ast.new SentenceList(s);
  :}
  | sentenceList:sl sentence:s {:
    RESULT = sl.add(s);
  :}
  ;

sentence ::= declarationList:d SEMICOLON {:
    RESULT = d;
  :}
  | type:t ID:id O_BRACK INT_CONST:c C_BRACK SEMICOLON {: // Array declaration
    try {
      RESULT = ast.new ArrayDeclaration(t, id, c, null);
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | type:t ID:id O_BRACK INT_CONST:c C_BRACK ASSIGN O_CURL arrayList:a C_CURL SEMICOLON {:
    try {
      RESULT = ast.new ArrayDeclaration(t, id, c, a);
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | expression:e SEMICOLON {:
    RESULT = e;
  :}
  | IF O_PAR condition:c C_PAR sentence:s {:
    RESULT = ast.new If(c, s, null);
  :} %prec IF
  | IF O_PAR condition:c C_PAR sentence:s1 ELSE sentence:s2 {:
    RESULT = ast.new If(c, s1, s2);
  :} %prec ELSE
  | WHILE O_PAR condition:c C_PAR sentence:s {:
    RESULT = ast.new While(c, s);
  :}
  | DO sentence:s WHILE O_PAR condition:c C_PAR SEMICOLON {:
    RESULT = ast.new DoWhile(c, s);
  :}
  | FOR O_PAR expression:i SEMICOLON condition:c SEMICOLON expression:u C_PAR sentence:s {:
    RESULT = ast.new For(i, c, u, s);
  :}
  | FOR O_PAR SEMICOLON condition:c SEMICOLON expression:u C_PAR sentence:s {:
    RESULT = ast.new For(null, c, u, s);
  :}
  | FOR O_PAR expression:i SEMICOLON condition:c SEMICOLON C_PAR sentence:s {:
    RESULT = ast.new For(i, c, null, s);
  :}
  | FOR O_PAR SEMICOLON condition:c SEMICOLON C_PAR sentence:s {:
    RESULT = ast.new For(null, c, null, s);
  :}
  | PRINT O_PAR O_CURL arrayList:a C_CURL C_PAR SEMICOLON {:
    RESULT = ast.new Print(a);
  :}
  | PRINT O_PAR expression:e C_PAR SEMICOLON {:
    RESULT = ast.new Print(e);
  :}
  | O_CURL {: ast.pushScope(); :} sentenceList:s C_CURL {:
    ast.popScope();
    RESULT = s;
  :}
  ;

declarationList ::= type:t ID:id {:
    try {
      RESULT = ast.new DeclarationList(t, id, null);
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | declarationList:d COMA ID:id {:
    try {
      RESULT = d.add(id, null);
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | type:t ID:id ASSIGN expression:e {:
    try {
      RESULT = ast.new DeclarationList(t, id, e);
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | declarationList:d COMA ID:id ASSIGN expression:e {:
    try {
      RESULT = d.add(id, e);
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  ;

type ::= INT {:
    RESULT = Type.INT;
  :}
  | FLOAT {:
    RESULT = Type.FLOAT;
  :}
  | CHAR {:
    RESULT = Type.CHAR;
  :}
  | STRING {:
    RESULT = Type.STRING;
  :}
  ;

expression ::= arithmetic:a {:
    RESULT = a;
  :}
  | O_PAR expression:e C_PAR {:
    RESULT = e;
  :}
  | ID:id ASSIGN expression:e {:
    try {
      RESULT = ast.new Assignment(id, e);
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | ID:id ASSIGN O_CURL arrayList:a C_CURL {:
    try {
      RESULT = ast.new Assignment(id, a);
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | ID:id O_BRACK expression:e C_BRACK ASSIGN expression:e2 {:
    try {
      RESULT = ast.new ArrayElementAssignment(id, e, e2);
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | CAST_INT expression:e {:
    RESULT = ast.new Cast(Type.INT, e);
  :}
  | CAST_FLOAT expression:e {:
    RESULT = ast.new Cast(Type.FLOAT, e);
  :}
  | CAST_CHAR expression:e {:
    RESULT = ast.new Cast(Type.CHAR, e);
  :}
  | ID:id {:
    RESULT = ast.new Identifier(id);
  :}
  | ID:id O_BRACK expression:e C_BRACK {:
    RESULT = ast.new ArrayAccess(id, e);
  :}
  | INT_CONST:c {:
    RESULT = ast.new NumericLiteral(Type.INT, c);
  :}
  | FLOAT_CONST:c {:
    RESULT = ast.new NumericLiteral(Type.FLOAT, c);
  :}
  | CHAR_CONST:c {:
    RESULT = ast.new CharLiteral(c);
  :}
  | STRING_CONST:c {:
    RESULT = ast.new StringLiteral(c);
  :}
  | ID:id DOT LENGTH {:
    RESULT = ast.new Length(id);
  :}
  ;

arrayList ::= expression:e {:
    RESULT = ast.new ArrayLiteralList(e);
  :}
  | arrayList:a COMA expression:e {:
    try {
      RESULT = a.add(e);
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  ;

arithmetic ::= expression:e1 PLUS expression:e2 {:
    try {
      RESULT = ast.new BinaryArithmetic(e1, e2, "+");
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | expression:e1 MINUS expression:e2 {:
    try {
      RESULT = ast.new BinaryArithmetic(e1, e2, "-");
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | expression:e1 MULT expression:e2 {:
    try {
      RESULT = ast.new BinaryArithmetic(e1, e2, "*");
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | expression:e1 DIV expression:e2 {:
    try {
      RESULT = ast.new BinaryArithmetic(e1, e2, "/");
    } catch (Exception ex) {
      PLXC.out.print("# ERROR: " + ex.getMessage() + "\n");
      PLXC.out.print("   error;\n   halt;\n");
      System.exit(0);
      throw ex;
    }
  :}
  | MINUS expression:e {:
    RESULT = ast.new UnaryMinus(e);
  :} %prec MINUS_SIGN
  ;

condition ::= expression:e1 EQ expression:e2 {:
    RESULT = ast.new BinaryCondition(e1, e2, "==");
  :}
  | expression:e1 NEQ expression:e2 {:
    RESULT = ast.new BinaryCondition(e1, e2, "!=");
  :}
  | expression:e1 GT expression:e2 {:
    RESULT = ast.new BinaryCondition(e1, e2, ">");
  :}
  | expression:e1 LT expression:e2 {:
    RESULT = ast.new BinaryCondition(e1, e2, "<");
  :}
  | expression:e1 GTE expression:e2 {:
    RESULT = ast.new BinaryCondition(e1, e2, ">=");
  :}
  | expression:e1 LTE expression:e2 {:
    RESULT = ast.new BinaryCondition(e1, e2, "<=");
  :}
  | NOT condition:c {:
    RESULT = ast.new Not(c);
  :}
  | condition:c1 OR condition:c2 {:
    RESULT = ast.new Or(c1, c2);
  :}
  | condition:c1 AND condition:c2 {:
    RESULT = ast.new And(c1, c2);
  :}
  | O_PAR condition:c C_PAR {:
    RESULT = c;
  :}
  ;
