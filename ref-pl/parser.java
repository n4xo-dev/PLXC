
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\007" +
    "\000\002\004\011\000\002\004\007\000\002\004\011\000" +
    "\002\004\013\000\002\004\007\000\002\004\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\005\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\004\000\002\006" +
    "\005\000\002\006\005\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\026\006\013\010\011\015\004\050\014\055" +
    "\005\056\007\057\021\072\016\073\010\077\017\001\002" +
    "\000\012\006\013\015\004\072\016\073\010\001\002\000" +
    "\004\006\122\001\002\000\004\002\121\001\002\000\004" +
    "\006\111\001\002\000\036\004\uffed\007\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\001\002\000\026\006" +
    "\013\010\011\015\004\050\014\055\005\056\007\057\021" +
    "\072\016\073\010\077\017\001\002\000\032\002\uffff\006" +
    "\uffff\010\uffff\011\uffff\015\uffff\050\uffff\055\uffff\056\uffff" +
    "\057\uffff\072\uffff\073\uffff\077\uffff\001\002\000\012\006" +
    "\013\015\004\072\016\073\010\001\002\000\004\006\100" +
    "\001\002\000\014\004\077\014\044\015\037\016\042\017" +
    "\047\001\002\000\040\004\uffee\007\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\031\075\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\001\002\000\004" +
    "\006\071\001\002\000\030\002\001\006\013\010\011\015" +
    "\004\050\014\055\005\056\007\057\021\072\016\073\010" +
    "\077\017\001\002\000\026\006\013\010\011\015\004\050" +
    "\014\055\005\056\007\057\021\072\016\073\010\077\017" +
    "\001\002\000\004\055\023\001\002\000\004\006\024\001" +
    "\002\000\014\006\026\015\004\042\025\072\016\073\010" +
    "\001\002\000\014\006\026\015\004\042\025\072\016\073" +
    "\010\001\002\000\014\006\026\015\004\042\025\072\016" +
    "\073\010\001\002\000\026\014\044\015\037\016\042\017" +
    "\047\032\045\033\043\034\046\035\050\036\040\037\041" +
    "\001\002\000\010\007\033\040\031\041\032\001\002\000" +
    "\014\006\026\015\004\042\025\072\016\073\010\001\002" +
    "\000\014\006\026\015\004\042\025\072\016\073\010\001" +
    "\002\000\004\004\034\001\002\000\034\002\ufff9\006\ufff9" +
    "\010\ufff9\011\ufff9\015\ufff9\050\ufff9\051\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\072\ufff9\073\ufff9\077\ufff9\001\002\000\012" +
    "\004\uffe5\007\uffe5\040\031\041\uffe5\001\002\000\012\004" +
    "\uffe4\007\uffe4\040\uffe4\041\uffe4\001\002\000\012\006\013" +
    "\015\004\072\016\073\010\001\002\000\012\006\013\015" +
    "\004\072\016\073\010\001\002\000\012\006\013\015\004" +
    "\072\016\073\010\001\002\000\012\006\013\015\004\072" +
    "\016\073\010\001\002\000\012\006\013\015\004\072\016" +
    "\073\010\001\002\000\012\006\013\015\004\072\016\073" +
    "\010\001\002\000\012\006\013\015\004\072\016\073\010" +
    "\001\002\000\012\006\013\015\004\072\016\073\010\001" +
    "\002\000\012\006\013\015\004\072\016\073\010\001\002" +
    "\000\012\006\013\015\004\072\016\073\010\001\002\000" +
    "\022\004\uffe9\007\uffe9\014\044\015\037\016\042\017\047" +
    "\040\uffe9\041\uffe9\001\002\000\036\004\ufff2\007\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\001\002\000" +
    "\022\004\uffea\007\uffea\014\044\015\037\016\042\017\047" +
    "\040\uffea\041\uffea\001\002\000\022\004\uffec\007\uffec\014" +
    "\044\015\037\016\042\017\047\040\uffec\041\uffec\001\002" +
    "\000\036\004\ufff5\007\ufff5\014\ufff5\015\ufff5\016\042\017" +
    "\047\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\001\002\000\022\004\uffeb\007\uffeb\014" +
    "\044\015\037\016\042\017\047\040\uffeb\041\uffeb\001\002" +
    "\000\036\004\ufff3\007\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\001\002\000\022\004\uffe7\007\uffe7\014" +
    "\044\015\037\016\042\017\047\040\uffe7\041\uffe7\001\002" +
    "\000\022\004\uffe8\007\uffe8\014\044\015\037\016\042\017" +
    "\047\040\uffe8\041\uffe8\001\002\000\036\004\ufff4\007\ufff4" +
    "\014\ufff4\015\ufff4\016\042\017\047\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\001\002" +
    "\000\030\007\066\014\044\015\037\016\042\017\047\032" +
    "\045\033\043\034\046\035\050\036\040\037\041\001\002" +
    "\000\010\007\065\040\031\041\032\001\002\000\012\004" +
    "\uffe3\007\uffe3\040\uffe3\041\uffe3\001\002\000\036\004\ufff0" +
    "\007\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\001\002\000\012\004\uffe6\007\uffe6\040\uffe6\041\uffe6\001" +
    "\002\000\032\002\ufffe\006\ufffe\010\ufffe\011\ufffe\015\ufffe" +
    "\050\ufffe\055\ufffe\056\ufffe\057\ufffe\072\ufffe\073\ufffe\077" +
    "\ufffe\001\002\000\012\006\013\015\004\072\016\073\010" +
    "\001\002\000\014\007\073\014\044\015\037\016\042\017" +
    "\047\001\002\000\004\004\074\001\002\000\034\002\ufff7" +
    "\006\ufff7\010\ufff7\011\ufff7\015\ufff7\050\ufff7\051\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\072\ufff7\073\ufff7\077\ufff7\001\002" +
    "\000\012\006\013\015\004\072\016\073\010\001\002\000" +
    "\036\004\uffef\007\uffef\014\044\015\037\016\042\017\047" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\001\002\000\034\002\ufffd\006\ufffd\010\ufffd" +
    "\011\ufffd\015\ufffd\050\ufffd\051\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\072\ufffd\073\ufffd\077\ufffd\001\002\000\014\006\026" +
    "\015\004\042\025\072\016\073\010\001\002\000\010\007" +
    "\102\040\031\041\032\001\002\000\026\006\013\010\011" +
    "\015\004\050\014\055\005\056\007\057\021\072\016\073" +
    "\010\077\017\001\002\000\034\002\ufffc\006\ufffc\010\ufffc" +
    "\011\ufffc\015\ufffc\050\ufffc\051\104\055\ufffc\056\ufffc\057" +
    "\ufffc\072\ufffc\073\ufffc\077\ufffc\001\002\000\026\006\013" +
    "\010\011\015\004\050\014\055\005\056\007\057\021\072" +
    "\016\073\010\077\017\001\002\000\034\002\ufffb\006\ufffb" +
    "\010\ufffb\011\ufffb\015\ufffb\050\ufffb\051\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\072\ufffb\073\ufffb\077\ufffb\001\002\000\014" +
    "\007\066\014\044\015\037\016\042\017\047\001\002\000" +
    "\030\006\013\010\011\011\110\015\004\050\014\055\005" +
    "\056\007\057\021\072\016\073\010\077\017\001\002\000" +
    "\034\002\ufff6\006\ufff6\010\ufff6\011\ufff6\015\ufff6\050\ufff6" +
    "\051\ufff6\055\ufff6\056\ufff6\057\ufff6\072\ufff6\073\ufff6\077" +
    "\ufff6\001\002\000\012\006\013\015\004\072\016\073\010" +
    "\001\002\000\014\004\113\014\044\015\037\016\042\017" +
    "\047\001\002\000\014\006\026\015\004\042\025\072\016" +
    "\073\010\001\002\000\010\004\115\040\031\041\032\001" +
    "\002\000\012\006\013\015\004\072\016\073\010\001\002" +
    "\000\014\007\117\014\044\015\037\016\042\017\047\001" +
    "\002\000\026\006\013\010\011\015\004\050\014\055\005" +
    "\056\007\057\021\072\016\073\010\077\017\001\002\000" +
    "\034\002\ufff8\006\ufff8\010\ufff8\011\ufff8\015\ufff8\050\ufff8" +
    "\051\ufff8\055\ufff8\056\ufff8\057\ufff8\072\ufff8\073\ufff8\077" +
    "\ufff8\001\002\000\004\002\000\001\002\000\014\006\026" +
    "\015\004\042\025\072\016\073\010\001\002\000\010\007" +
    "\124\040\031\041\032\001\002\000\026\006\013\010\011" +
    "\015\004\050\014\055\005\056\007\057\021\072\016\073" +
    "\010\077\017\001\002\000\034\002\ufffa\006\ufffa\010\ufffa" +
    "\011\ufffa\015\ufffa\050\ufffa\051\ufffa\055\ufffa\056\ufffa\057" +
    "\ufffa\072\ufffa\073\ufffa\077\ufffa\001\002\000\036\004\ufff1" +
    "\007\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\012\002\005\003\017\004\011\005\014\001" +
    "\001\000\004\005\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\106\004\011\005\014\001\001\000\002\001\001\000\004" +
    "\005\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\067\005\014" +
    "\001\001\000\006\004\021\005\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\026\006\027\001\001" +
    "\000\006\005\026\006\066\001\001\000\006\005\062\006" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\026\006\035\001\001\000\006\005\026\006\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\061\001\001\000\004\005" +
    "\060\001\001\000\004\005\057\001\001\000\004\005\056" +
    "\001\001\000\004\005\055\001\001\000\004\005\054\001" +
    "\001\000\004\005\053\001\001\000\004\005\052\001\001" +
    "\000\004\005\051\001\001\000\004\005\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\026\006\100\001\001\000" +
    "\002\001\001\000\006\004\102\005\014\001\001\000\002" +
    "\001\001\000\006\004\104\005\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\067\005\014\001\001" +
    "\000\002\001\001\000\004\005\111\001\001\000\002\001" +
    "\001\000\006\005\026\006\113\001\001\000\002\001\001" +
    "\000\004\005\115\001\001\000\002\001\001\000\006\004" +
    "\117\005\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\026\006\122\001\001\000\002\001\001\000" +
    "\006\004\124\005\014\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  AST ast = new AST();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= sentenceList 
            {
              AST.Program RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenceList sl = (AST.SentenceList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new Program(sl);
    PLC.out.print(RESULT.gen());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Program start_val = (AST.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentenceList ::= sentence 
            {
              AST.SentenceList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Node s = (AST.Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List<AST.Node> l = new ArrayList<AST.Node>();
    l.add(s);
    RESULT = ast.new SentenceList(l);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenceList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentenceList ::= sentenceList sentence 
            {
              AST.SentenceList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenceList sl = (AST.SentenceList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Node s = (AST.Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    sl.add(s);
    RESULT = sl;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenceList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentence ::= expression SEMICOLON 
            {
              AST.Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Expression e = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = e;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentence ::= IF O_PAR condition C_PAR sentence 
            {
              AST.Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Condition c = (AST.Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Node s = (AST.Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new If(c, s, null);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentence ::= IF O_PAR condition C_PAR sentence ELSE sentence 
            {
              AST.Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST.Condition c = (AST.Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Node s1 = (AST.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Node s2 = (AST.Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new If(c, s1, s2);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentence ::= WHILE O_PAR condition C_PAR sentence 
            {
              AST.Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Condition c = (AST.Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Node s = (AST.Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new While(c, s);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentence ::= DO sentence WHILE O_PAR condition C_PAR SEMICOLON 
            {
              AST.Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST.Node s = (AST.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Condition c = (AST.Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = ast.new DoWhile(c, s);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentence ::= FOR O_PAR expression SEMICOLON condition SEMICOLON expression C_PAR sentence 
            {
              AST.Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AST.Expression i = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST.Condition c = (AST.Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression u = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Node s = (AST.Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new For(i, c, u, s);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentence ::= PRINT O_PAR expression C_PAR SEMICOLON 
            {
              AST.Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression e = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = ast.new Print(e);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentence ::= O_CURL sentenceList C_CURL 
            {
              AST.Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenceList s = (AST.SentenceList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = s;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= expression PLUS expression 
            {
              AST.Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression e1 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e2 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new BinaryArithmetic(e1, e2, "+");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= expression MINUS expression 
            {
              AST.Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression e1 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e2 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new BinaryArithmetic(e1, e2, "-");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= expression MULT expression 
            {
              AST.Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression e1 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e2 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new BinaryArithmetic(e1, e2, "*");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= expression DIV expression 
            {
              AST.Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression e1 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e2 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new BinaryArithmetic(e1, e2, "/");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= MINUS expression 
            {
              AST.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new UnaryMinus(e);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= O_PAR expression C_PAR 
            {
              AST.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Expression e = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = e;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= ID ASSIGN expression 
            {
              AST.Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new Assignment(id, e);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= ID 
            {
              AST.Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new Identifier(id);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= INT_CONST 
            {
              AST.Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new NumericLiteral(c);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condition ::= expression EQ expression 
            {
              AST.Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression e1 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e2 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new BinaryCondition(e1, e2, "==");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condition ::= expression NEQ expression 
            {
              AST.Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression e1 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e2 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new BinaryCondition(e1, e2, "!=");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condition ::= expression GT expression 
            {
              AST.Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression e1 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e2 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new BinaryCondition(e1, e2, ">");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condition ::= expression LT expression 
            {
              AST.Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression e1 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e2 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new BinaryCondition(e1, e2, "<");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condition ::= expression GTE expression 
            {
              AST.Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression e1 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e2 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new BinaryCondition(e1, e2, ">=");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition ::= expression LTE expression 
            {
              AST.Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expression e1 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expression e2 = (AST.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new BinaryCondition(e1, e2, "<=");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condition ::= NOT condition 
            {
              AST.Condition RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Condition c = (AST.Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new Not(c);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= condition OR condition 
            {
              AST.Condition RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Condition c1 = (AST.Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Condition c2 = (AST.Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new Or(c1, c2);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condition ::= condition AND condition 
            {
              AST.Condition RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Condition c1 = (AST.Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Condition c2 = (AST.Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ast.new And(c1, c2);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition ::= O_PAR condition C_PAR 
            {
              AST.Condition RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Condition c = (AST.Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = c;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
