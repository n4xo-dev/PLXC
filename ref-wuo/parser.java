
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\034\002\000\002\035\002\000\002\004\012\000" +
    "\002\036\002\000\002\037\002\000\002\004\011\000\002" +
    "\040\002\000\002\041\002\000\002\004\013\000\002\042" +
    "\002\000\002\043\002\000\002\044\002\000\002\004\016" +
    "\000\002\004\005\000\002\004\005\000\002\004\011\000" +
    "\002\004\007\000\002\045\002\000\002\004\006\000\002" +
    "\004\011\000\002\004\003\000\002\022\003\000\002\017" +
    "\003\000\002\020\003\000\002\021\003\000\002\005\004" +
    "\000\002\013\006\000\002\013\010\000\002\013\005\000" +
    "\002\013\005\000\002\013\007\000\002\033\006\000\002" +
    "\033\010\000\002\033\011\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\010\000\002\016\006\000\002" +
    "\016\011\000\002\016\013\000\002\016\014\000\002\016" +
    "\016\000\002\016\003\000\002\016\004\000\002\016\006" +
    "\000\002\016\004\000\002\016\005\000\002\016\003\000" +
    "\002\016\003\000\002\016\005\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\046\002\000\002\047" +
    "\002\000\002\016\011\000\002\050\002\000\002\016\006" +
    "\000\002\016\003\000\002\016\003\000\002\016\005\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\024\003\000\002\023\003\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\005\000\002\010\004\000\002\025\003\000" +
    "\002\025\004\000\002\011\013\000\002\011\007\000\002" +
    "\011\013\000\002\011\007\000\002\011\013\000\002\011" +
    "\007\000\002\011\007\000\002\011\007\000\002\012\016" +
    "\000\002\012\012\000\002\012\021\000\002\012\015\000" +
    "\002\027\003\000\002\027\005\000\002\030\005\000\002" +
    "\030\007\000\002\031\005\000\002\031\007\000\002\051" +
    "\002\000\002\006\010\000\002\052\002\000\002\006\006" +
    "\000\002\006\005\000\002\006\003\000\002\053\002\000" +
    "\002\007\010\000\002\054\002\000\002\007\006\000\002" +
    "\007\005\000\002\007\003\000\002\055\002\000\002\014" +
    "\010\000\002\056\002\000\002\014\006\000\002\014\005" +
    "\000\002\014\003\000\002\057\002\000\002\015\010\000" +
    "\002\060\002\000\002\015\006\000\002\015\005\000\002" +
    "\015\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\004\000\002\061\002\000\002\032\006\000" +
    "\002\062\002\000\002\032\006\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\072\005\053\007\050\014\030\015\007\020" +
    "\041\031\026\033\044\034\056\035\021\036\055\040\017" +
    "\042\020\043\016\045\045\046\042\047\023\051\032\061" +
    "\034\065\027\066\006\067\043\070\015\071\037\074\047" +
    "\075\031\076\013\077\035\100\025\001\002\000\004\005" +
    "\ufff8\001\002\000\072\005\ufff5\007\ufff5\014\ufff5\015\ufff5" +
    "\020\ufff5\031\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\040" +
    "\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5\047\ufff5\051\ufff5" +
    "\061\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\074" +
    "\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5\001\002\000\004" +
    "\075\u012c\001\002\000\006\015\007\075\uff9e\001\002\000" +
    "\004\005\u0122\001\002\000\004\075\u011f\001\002\000\004" +
    "\004\uffa2\001\002\000\064\004\uffb8\006\uffb8\010\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\041" +
    "\uffb8\044\uffb8\052\u0117\053\u011a\054\u0118\055\u0119\056\uffb8" +
    "\057\uffb8\060\uffb8\001\002\000\006\005\u0101\075\u0102\001" +
    "\002\000\042\005\053\014\030\015\007\020\041\042\020" +
    "\043\016\046\042\047\023\065\027\067\043\070\015\071" +
    "\037\075\031\076\013\077\035\100\025\001\002\000\004" +
    "\075\377\001\002\000\006\015\007\075\335\001\002\000" +
    "\004\075\332\001\002\000\006\005\uffe6\075\uffe6\001\002" +
    "\000\004\002\331\001\002\000\042\005\053\014\030\015" +
    "\007\020\041\042\020\043\016\046\042\047\023\065\027" +
    "\067\043\070\015\071\037\075\031\076\013\077\035\100" +
    "\025\001\002\000\100\002\uffff\005\uffff\007\uffff\010\uffff" +
    "\014\uffff\015\uffff\020\uffff\031\uffff\033\uffff\034\uffff\035" +
    "\uffff\036\uffff\040\uffff\042\uffff\043\uffff\045\uffff\046\uffff" +
    "\047\uffff\051\uffff\061\uffff\064\uffff\065\uffff\066\uffff\067" +
    "\uffff\070\uffff\071\uffff\074\uffff\075\uffff\076\uffff\077\uffff" +
    "\100\uffff\001\002\000\054\004\uffad\006\uffad\010\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\041" +
    "\uffad\044\uffad\056\uffad\057\uffad\060\uffad\001\002\000\004" +
    "\005\uffe5\001\002\000\006\065\325\075\326\001\002\000" +
    "\042\005\053\014\030\015\007\020\041\042\020\043\016" +
    "\046\042\047\023\065\027\067\043\070\015\071\037\075" +
    "\031\076\013\077\035\100\025\001\002\000\076\004\uffbd" +
    "\006\uffbd\010\uffbd\011\253\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\255\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\041\uffbd\042\245\043" +
    "\251\044\uffbd\052\254\053\250\054\247\055\252\056\uffbd" +
    "\057\uffbd\060\uffbd\072\246\001\002\000\102\002\uffe7\005" +
    "\uffe7\007\uffe7\010\uffe7\014\uffe7\015\uffe7\020\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\040\uffe7\042" +
    "\uffe7\043\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\061\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\074" +
    "\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7\001\002\000\004" +
    "\034\243\001\002\000\004\005\222\001\002\000\054\004" +
    "\uffb7\006\uffb7\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\041\uffb7\044\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\001\002\000\004\004\uffa1\001\002\000\042\005" +
    "\053\014\030\015\007\020\041\042\020\043\016\046\042" +
    "\047\023\065\027\067\043\070\015\071\037\075\031\076" +
    "\013\077\035\100\025\001\002\000\054\004\uffac\006\uffac" +
    "\010\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\041\uffac\044\uffac\056\uffac\057\uffac\060\uffac\001" +
    "\002\000\042\005\053\014\030\015\007\020\041\042\020" +
    "\043\016\046\042\047\023\065\027\067\043\070\015\071" +
    "\037\075\031\076\013\077\035\100\025\001\002\000\042" +
    "\005\053\014\030\015\007\020\041\042\020\043\016\046" +
    "\042\047\023\065\027\067\043\070\015\071\037\075\031" +
    "\076\013\077\035\100\025\001\002\000\042\005\053\014" +
    "\030\015\007\020\041\042\020\043\016\046\042\047\023" +
    "\065\027\067\043\070\015\071\037\075\031\076\013\077" +
    "\035\100\025\001\002\000\004\005\uffe4\001\002\000\004" +
    "\075\171\001\002\000\010\027\067\030\073\056\070\001" +
    "\002\000\004\075\160\001\002\000\072\005\uffea\007\uffea" +
    "\014\uffea\015\uffea\020\uffea\031\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\040\uffea\042\uffea\043\uffea\045\uffea\046\uffea" +
    "\047\uffea\051\uffea\061\uffea\065\uffea\066\uffea\067\uffea\070" +
    "\uffea\071\uffea\074\uffea\075\uffea\076\uffea\077\uffea\100\uffea" +
    "\001\002\000\074\002\001\005\053\007\050\014\030\015" +
    "\007\020\041\031\026\033\044\034\056\035\021\036\055" +
    "\040\017\042\020\043\016\045\045\046\042\047\023\051" +
    "\032\061\034\065\027\066\006\067\043\070\015\071\037" +
    "\074\047\075\031\076\013\077\035\100\025\001\002\000" +
    "\004\004\152\001\002\000\042\005\053\014\030\015\007" +
    "\020\041\042\020\043\016\046\042\047\023\065\027\067" +
    "\043\070\015\071\037\075\031\076\013\077\035\100\025" +
    "\001\002\000\034\004\151\013\104\014\077\015\103\016" +
    "\107\021\110\022\101\023\111\024\106\025\112\026\105" +
    "\044\102\060\113\001\002\000\042\005\060\014\030\015" +
    "\007\020\041\042\020\043\016\046\042\047\023\065\027" +
    "\067\043\070\015\071\037\075\031\076\013\077\035\100" +
    "\025\001\002\000\072\005\uffe3\007\uffe3\014\uffe3\015\uffe3" +
    "\020\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\040" +
    "\uffe3\042\uffe3\043\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3" +
    "\061\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\074" +
    "\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\001\002\000\034" +
    "\004\150\013\104\014\077\015\103\016\107\021\110\022" +
    "\101\023\111\024\106\025\112\026\105\044\102\060\113" +
    "\001\002\000\046\005\053\007\061\014\030\015\007\020" +
    "\041\042\020\043\016\046\042\047\023\065\027\067\043" +
    "\070\015\071\037\075\031\076\013\077\035\100\025\101" +
    "\064\001\002\000\042\005\053\014\030\015\007\020\041" +
    "\042\020\043\016\046\042\047\023\065\027\067\043\070" +
    "\015\071\037\075\031\076\013\077\035\100\025\001\002" +
    "\000\034\006\140\013\104\014\077\015\103\016\107\021" +
    "\110\022\101\023\111\024\106\025\112\026\105\044\102" +
    "\060\113\001\002\000\012\006\071\027\067\030\073\056" +
    "\070\001\002\000\004\006\065\001\002\000\004\004\066" +
    "\001\002\000\102\002\uffeb\005\uffeb\007\uffeb\010\uffeb\014" +
    "\uffeb\015\uffeb\020\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\040\uffeb\042\uffeb\043\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\051\uffeb\061\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\074\uffeb\075\uffeb\076\uffeb\077" +
    "\uffeb\100\uffeb\001\002\000\042\005\uff6b\014\uff6b\015\uff6b" +
    "\020\uff6b\042\uff6b\043\uff6b\046\uff6b\047\uff6b\065\uff6b\067" +
    "\uff6b\070\uff6b\071\uff6b\075\uff6b\076\uff6b\077\uff6b\100\uff6b" +
    "\001\002\000\042\005\uffa6\014\uffa6\015\uffa6\020\uffa6\042" +
    "\uffa6\043\uffa6\046\uffa6\047\uffa6\065\uffa6\067\uffa6\070\uffa6" +
    "\071\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\001\002\000" +
    "\014\004\uff67\006\uff67\027\uff67\030\uff67\056\uff67\001\002" +
    "\000\042\005\uffb2\014\uffb2\015\uffb2\020\uffb2\042\uffb2\043" +
    "\uffb2\046\uffb2\047\uffb2\065\uffb2\067\uffb2\070\uffb2\071\uffb2" +
    "\075\uffb2\076\uffb2\077\uffb2\100\uffb2\001\002\000\042\005" +
    "\uff69\014\uff69\015\uff69\020\uff69\042\uff69\043\uff69\046\uff69" +
    "\047\uff69\065\uff69\067\uff69\070\uff69\071\uff69\075\uff69\076" +
    "\uff69\077\uff69\100\uff69\001\002\000\042\005\053\014\030" +
    "\015\007\020\041\042\020\043\016\046\042\047\023\065" +
    "\027\067\043\070\015\071\037\075\031\076\013\077\035" +
    "\100\025\001\002\000\032\013\104\014\077\015\103\016" +
    "\107\021\110\022\101\023\111\024\106\025\112\026\105" +
    "\044\102\060\113\001\002\000\014\004\uff68\006\uff68\027" +
    "\067\030\uff68\056\uff68\001\002\000\042\005\053\014\030" +
    "\015\007\020\041\042\020\043\016\046\042\047\023\065" +
    "\027\067\043\070\015\071\037\075\031\076\013\077\035" +
    "\100\025\001\002\000\042\005\uffaf\014\uffaf\015\uffaf\020" +
    "\uffaf\042\uffaf\043\uffaf\046\uffaf\047\uffaf\065\uffaf\067\uffaf" +
    "\070\uffaf\071\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\001" +
    "\002\000\042\005\053\014\030\015\007\020\041\042\020" +
    "\043\016\046\042\047\023\065\027\067\043\070\015\071" +
    "\037\075\031\076\013\077\035\100\025\001\002\000\042" +
    "\005\053\014\030\015\007\020\041\042\020\043\016\046" +
    "\042\047\023\065\027\067\043\070\015\071\037\075\031" +
    "\076\013\077\035\100\025\001\002\000\042\005\053\014" +
    "\030\015\007\020\041\042\020\043\016\046\042\047\023" +
    "\065\027\067\043\070\015\071\037\075\031\076\013\077" +
    "\035\100\025\001\002\000\042\005\053\014\030\015\007" +
    "\020\041\042\020\043\016\046\042\047\023\065\027\067" +
    "\043\070\015\071\037\075\031\076\013\077\035\100\025" +
    "\001\002\000\042\005\053\014\030\015\007\020\041\042" +
    "\020\043\016\046\042\047\023\065\027\067\043\070\015" +
    "\071\037\075\031\076\013\077\035\100\025\001\002\000" +
    "\042\005\053\014\030\015\007\020\041\042\020\043\016" +
    "\046\042\047\023\065\027\067\043\070\015\071\037\075" +
    "\031\076\013\077\035\100\025\001\002\000\042\005\053" +
    "\014\030\015\007\020\041\042\020\043\016\046\042\047" +
    "\023\065\027\067\043\070\015\071\037\075\031\076\013" +
    "\077\035\100\025\001\002\000\042\005\053\014\030\015" +
    "\007\020\041\042\020\043\016\046\042\047\023\065\027" +
    "\067\043\070\015\071\037\075\031\076\013\077\035\100" +
    "\025\001\002\000\042\005\053\014\030\015\007\020\041" +
    "\042\020\043\016\046\042\047\023\065\027\067\043\070" +
    "\015\071\037\075\031\076\013\077\035\100\025\001\002" +
    "\000\042\005\053\014\030\015\007\020\041\042\020\043" +
    "\016\046\042\047\023\065\027\067\043\070\015\071\037" +
    "\075\031\076\013\077\035\100\025\001\002\000\042\005" +
    "\uffa7\014\uffa7\015\uffa7\020\uffa7\042\uffa7\043\uffa7\046\uffa7" +
    "\047\uffa7\065\uffa7\067\uffa7\070\uffa7\071\uffa7\075\uffa7\076" +
    "\uffa7\077\uffa7\100\uffa7\001\002\000\044\004\uff6d\006\uff6d" +
    "\013\104\014\077\015\103\016\107\021\110\022\101\023" +
    "\111\024\106\025\112\026\105\027\uff6d\030\uff6d\044\102" +
    "\056\uff6d\060\113\001\002\000\044\004\uff72\006\uff72\013" +
    "\104\014\077\015\103\016\107\021\110\022\101\023\111" +
    "\024\106\025\112\026\105\027\uff72\030\uff72\044\102\056" +
    "\uff72\060\113\001\002\000\044\004\uff6f\006\uff6f\013\104" +
    "\014\077\015\103\016\107\021\110\022\101\023\111\024" +
    "\106\025\112\026\105\027\uff6f\030\uff6f\044\102\056\uff6f" +
    "\060\113\001\002\000\054\004\uffd6\006\uffd6\010\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\041" +
    "\uffd6\044\102\056\uffd6\057\uffd6\060\uffd6\001\002\000\044" +
    "\004\uff71\006\uff71\013\104\014\077\015\103\016\107\021" +
    "\110\022\101\023\111\024\106\025\112\026\105\027\uff71" +
    "\030\uff71\044\102\056\uff71\060\113\001\002\000\044\004" +
    "\uff6e\006\uff6e\013\104\014\077\015\103\016\107\021\110" +
    "\022\101\023\111\024\106\025\112\026\105\027\uff6e\030" +
    "\uff6e\044\102\056\uff6e\060\113\001\002\000\054\004\uffd9" +
    "\006\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\103\016" +
    "\107\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\041\uffd9\044\102\056\uffd9\057\uffd9\060" +
    "\uffd9\001\002\000\054\004\uffd7\006\uffd7\010\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\041\uffd7" +
    "\044\102\056\uffd7\057\uffd7\060\uffd7\001\002\000\054\004" +
    "\uffd5\006\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\041\uffd5\044\uffd5\056\uffd5\057\uffd5" +
    "\060\uffd5\001\002\000\044\004\uff70\006\uff70\013\104\014" +
    "\077\015\103\016\107\021\110\022\101\023\111\024\106" +
    "\025\112\026\105\027\uff70\030\uff70\044\102\056\uff70\060" +
    "\113\001\002\000\042\005\053\014\030\015\007\020\041" +
    "\042\020\043\016\046\042\047\023\065\027\067\043\070" +
    "\015\071\037\075\031\076\013\077\035\100\025\001\002" +
    "\000\054\004\uffae\006\uffae\010\uffae\012\uffae\013\104\014" +
    "\077\015\103\016\107\021\110\022\101\023\111\024\106" +
    "\025\112\026\105\027\uffae\030\uffae\041\uffae\044\102\056" +
    "\uffae\057\uffae\060\113\001\002\000\054\004\uffd8\006\uffd8" +
    "\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\103\016\107\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\041\uffd8\044\102\056\uffd8\057\uffd8\060\uffd8\001" +
    "\002\000\042\005\053\014\030\015\007\020\041\042\020" +
    "\043\016\046\042\047\023\065\027\067\043\070\015\071" +
    "\037\075\031\076\013\077\035\100\025\001\002\000\034" +
    "\013\104\014\077\015\103\016\107\021\110\022\101\023" +
    "\111\024\106\025\112\026\105\044\102\057\uffb1\060\113" +
    "\001\002\000\004\057\134\001\002\000\042\005\053\014" +
    "\030\015\007\020\041\042\020\043\016\046\042\047\023" +
    "\065\027\067\043\070\015\071\037\075\031\076\013\077" +
    "\035\100\025\001\002\000\054\004\uffb0\006\uffb0\010\uffb0" +
    "\012\uffb0\013\104\014\077\015\103\016\107\021\110\022" +
    "\101\023\111\024\106\025\112\026\105\027\uffb0\030\uffb0" +
    "\041\uffb0\044\102\056\uffb0\057\uffb0\060\113\001\002\000" +
    "\042\005\053\014\030\015\007\020\041\042\020\043\016" +
    "\046\042\047\023\065\027\067\043\070\015\071\037\075" +
    "\031\076\013\077\035\100\025\001\002\000\014\004\uff6a" +
    "\006\uff6a\027\uff6a\030\uff6a\056\uff6a\001\002\000\054\004" +
    "\uffb6\006\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\041\uffb6\044\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\001\002\000\036\010\uff90\013\104\014\077\015" +
    "\103\016\107\021\110\022\101\023\111\024\106\025\112" +
    "\026\105\041\146\044\102\060\113\001\002\000\004\010" +
    "\143\001\002\000\004\006\144\001\002\000\004\004\145" +
    "\001\002\000\102\002\uffec\005\uffec\007\uffec\010\uffec\014" +
    "\uffec\015\uffec\020\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\040\uffec\042\uffec\043\uffec\045\uffec\046" +
    "\uffec\047\uffec\051\uffec\061\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\070\uffec\071\uffec\074\uffec\075\uffec\076\uffec\077" +
    "\uffec\100\uffec\001\002\000\042\005\053\014\030\015\007" +
    "\020\041\042\020\043\016\046\042\047\023\065\027\067" +
    "\043\070\015\071\037\075\031\076\013\077\035\100\025" +
    "\001\002\000\004\010\uff8f\001\002\000\102\002\uffed\005" +
    "\uffed\007\uffed\010\uffed\014\uffed\015\uffed\020\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\040\uffed\042" +
    "\uffed\043\uffed\045\uffed\046\uffed\047\uffed\051\uffed\061\uffed" +
    "\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\074" +
    "\uffed\075\uffed\076\uffed\077\uffed\100\uffed\001\002\000\102" +
    "\002\ufffd\005\ufffd\007\ufffd\010\ufffd\014\ufffd\015\ufffd\020" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\040\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\051" +
    "\ufffd\061\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd" +
    "\071\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\100\ufffd\001" +
    "\002\000\102\002\ufffc\005\ufffc\007\ufffc\010\ufffc\014\ufffc" +
    "\015\ufffc\020\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\040\ufffc\042\ufffc\043\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\051\ufffc\061\ufffc\064\ufffc\065\ufffc\066\ufffc\067" +
    "\ufffc\070\ufffc\071\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc" +
    "\100\ufffc\001\002\000\100\002\ufffe\005\ufffe\007\ufffe\010" +
    "\ufffe\014\ufffe\015\ufffe\020\ufffe\031\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\040\ufffe\042\ufffe\043\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\051\ufffe\061\ufffe\064\ufffe\065\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\074\ufffe\075\ufffe\076\ufffe\077" +
    "\ufffe\100\ufffe\001\002\000\072\005\053\007\050\014\030" +
    "\015\007\020\041\031\026\033\044\034\056\035\021\036" +
    "\055\040\017\042\020\043\016\045\045\046\042\047\023" +
    "\051\032\061\034\065\027\066\006\067\043\070\015\071" +
    "\037\074\047\075\031\076\013\077\035\100\025\001\002" +
    "\000\074\005\053\007\050\010\156\014\030\015\007\020" +
    "\041\031\026\033\044\034\056\035\021\036\055\040\017" +
    "\042\020\043\016\045\045\046\042\047\023\051\032\061" +
    "\034\065\027\066\006\067\043\070\015\071\037\074\047" +
    "\075\031\076\013\077\035\100\025\001\002\000\102\002" +
    "\uffe9\005\uffe9\007\uffe9\010\uffe9\014\uffe9\015\uffe9\020\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040" +
    "\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9" +
    "\061\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071" +
    "\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\001\002" +
    "\000\004\004\uff9f\001\002\000\010\004\uff73\017\162\041" +
    "\161\001\002\000\004\075\uff76\001\002\000\004\101\163" +
    "\001\002\000\006\004\uff74\041\164\001\002\000\004\075" +
    "\uff78\001\002\000\004\075\160\001\002\000\004\004\uff77" +
    "\001\002\000\004\075\160\001\002\000\004\004\uff75\001" +
    "\002\000\012\004\uff7f\011\174\017\175\041\173\001\002" +
    "\000\004\004\uffa4\001\002\000\004\075\uff82\001\002\000" +
    "\006\075\203\076\204\001\002\000\042\005\053\014\030" +
    "\015\007\020\041\042\020\043\016\046\042\047\023\065" +
    "\027\067\043\070\015\071\037\075\031\076\013\077\035" +
    "\100\025\001\002\000\036\004\uff80\013\104\014\077\015" +
    "\103\016\107\021\110\022\101\023\111\024\106\025\112" +
    "\026\105\041\177\044\102\060\113\001\002\000\004\075" +
    "\uff84\001\002\000\004\075\201\001\002\000\010\004\uff7f" +
    "\017\175\041\173\001\002\000\004\004\uff83\001\002\000" +
    "\004\012\212\001\002\000\004\012\205\001\002\000\006" +
    "\004\uff97\017\206\001\002\000\004\007\207\001\002\000" +
    "\042\005\053\014\030\015\007\020\041\042\020\043\016" +
    "\046\042\047\023\065\027\067\043\070\015\071\037\075" +
    "\031\076\013\077\035\100\025\001\002\000\004\010\211" +
    "\001\002\000\004\004\uff98\001\002\000\004\004\uff95\001" +
    "\002\000\004\075\201\001\002\000\004\004\uff81\001\002" +
    "\000\054\004\uffd1\006\uffd1\010\uffd1\012\uffd1\013\104\014" +
    "\077\015\103\016\107\021\110\022\101\023\111\024\106" +
    "\025\112\026\105\027\uffd1\030\uffd1\041\uffd1\044\102\056" +
    "\uffd1\057\uffd1\060\113\001\002\000\054\004\uffd3\006\uffd3" +
    "\010\uffd3\012\uffd3\013\104\014\077\015\103\016\107\021" +
    "\110\022\101\023\111\024\106\025\112\026\105\027\uffd3" +
    "\030\uffd3\041\uffd3\044\102\056\uffd3\057\uffd3\060\113\001" +
    "\002\000\054\004\uffa8\006\uffa8\010\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\041\uffa8\044\uffa8" +
    "\056\uffa8\057\uffa8\060\uffa8\001\002\000\014\004\uff6c\006" +
    "\uff6c\027\uff6c\030\uff6c\056\uff6c\001\002\000\054\004\uffa9" +
    "\006\uffa9\010\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\041\uffa9\044\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\001\002\000\042\005\053\014\030\015\007\020\041" +
    "\042\020\043\016\046\042\047\023\065\027\067\043\070" +
    "\015\071\037\075\031\076\013\077\035\100\025\001\002" +
    "\000\034\006\224\013\104\014\077\015\103\016\107\021" +
    "\110\022\101\023\111\024\106\025\112\026\105\044\102" +
    "\060\113\001\002\000\004\007\225\001\002\000\006\062" +
    "\230\063\226\001\002\000\004\057\241\001\002\000\004" +
    "\010\240\001\002\000\042\005\053\014\030\015\007\020" +
    "\041\042\020\043\016\046\042\047\023\065\027\067\043" +
    "\070\015\071\037\075\031\076\013\077\035\100\025\001" +
    "\002\000\034\013\104\014\077\015\103\016\107\021\110" +
    "\022\101\023\111\024\106\025\112\026\105\044\102\057" +
    "\232\060\113\001\002\000\076\005\053\007\050\010\uffde" +
    "\014\030\015\007\020\041\031\026\033\044\034\056\035" +
    "\021\036\055\040\017\042\020\043\016\045\045\046\042" +
    "\047\023\051\032\061\034\064\233\065\027\066\006\067" +
    "\043\070\015\071\037\074\047\075\031\076\013\077\035" +
    "\100\025\001\002\000\004\004\237\001\002\000\076\005" +
    "\053\007\050\010\uffe1\014\030\015\007\020\041\031\026" +
    "\033\044\034\056\035\021\036\055\040\017\042\020\043" +
    "\016\045\045\046\042\047\023\051\032\061\034\064\235" +
    "\065\027\066\006\067\043\070\015\071\037\074\047\075" +
    "\031\076\013\077\035\100\025\001\002\000\004\004\236" +
    "\001\002\000\004\010\uffe0\001\002\000\004\010\uffdd\001" +
    "\002\000\102\002\uffe8\005\uffe8\007\uffe8\010\uffe8\014\uffe8" +
    "\015\uffe8\020\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\040\uffe8\042\uffe8\043\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\051\uffe8\061\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\070\uffe8\071\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8" +
    "\100\uffe8\001\002\000\072\005\053\007\050\014\030\015" +
    "\007\020\041\031\026\033\044\034\056\035\021\036\055" +
    "\040\017\042\020\043\016\045\045\046\042\047\023\051" +
    "\032\061\034\065\027\066\006\067\043\070\015\071\037" +
    "\074\047\075\031\076\013\077\035\100\025\001\002\000" +
    "\074\005\053\007\050\010\uffdf\014\030\015\007\020\041" +
    "\031\026\033\044\034\056\035\021\036\055\040\017\042" +
    "\020\043\016\045\045\046\042\047\023\051\032\061\034" +
    "\065\027\066\006\067\043\070\015\071\037\074\047\075" +
    "\031\076\013\077\035\100\025\001\002\000\072\005\053" +
    "\007\050\014\030\015\007\020\041\031\026\033\044\034" +
    "\056\035\021\036\055\040\017\042\020\043\016\045\045" +
    "\046\042\047\023\051\032\061\034\065\027\066\006\067" +
    "\043\070\015\071\037\074\047\075\031\076\013\077\035" +
    "\100\025\001\002\000\102\002\uffee\005\uffee\007\uffee\010" +
    "\uffee\014\uffee\015\uffee\020\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\040\uffee\042\uffee\043\uffee\045" +
    "\uffee\046\uffee\047\uffee\051\uffee\061\uffee\064\uffee\065\uffee" +
    "\066\uffee\067\uffee\070\uffee\071\uffee\074\uffee\075\uffee\076" +
    "\uffee\077\uffee\100\uffee\001\002\000\054\004\uffce\006\uffce" +
    "\010\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\041\uffce\044\uffce\056\uffce\057\uffce\060\uffce\001" +
    "\002\000\004\073\323\001\002\000\042\005\053\014\030" +
    "\015\007\020\041\042\020\043\016\046\042\047\023\065" +
    "\027\067\043\070\015\071\037\075\031\076\013\077\035" +
    "\100\025\001\002\000\042\005\053\014\030\015\007\020" +
    "\041\042\020\043\016\046\042\047\023\065\027\067\043" +
    "\070\015\071\037\075\031\076\013\077\035\100\025\001" +
    "\002\000\054\004\uffcd\006\uffcd\010\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\041\uffcd\044\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\001\002\000\042\005\053\014" +
    "\030\015\007\020\041\042\020\043\016\046\042\047\023" +
    "\065\027\067\043\070\015\071\037\075\031\076\013\077" +
    "\035\100\025\001\002\000\042\005\053\014\030\015\007" +
    "\020\041\042\020\043\016\046\042\047\023\065\027\067" +
    "\043\070\015\071\037\075\031\076\013\077\035\100\025" +
    "\001\002\000\042\005\053\014\030\015\007\020\041\042" +
    "\020\043\016\046\042\047\023\065\027\067\043\070\015" +
    "\071\037\075\031\076\013\077\035\100\025\001\002\000" +
    "\044\005\053\007\256\014\030\015\007\020\041\042\020" +
    "\043\016\046\042\047\023\065\027\067\043\070\015\071" +
    "\037\075\031\076\013\077\035\100\025\001\002\000\044" +
    "\005\053\007\260\014\030\015\007\020\041\042\020\043" +
    "\016\046\042\047\023\065\027\067\043\070\015\071\037" +
    "\075\031\076\013\077\035\100\025\001\002\000\054\004" +
    "\uffcc\006\uffcc\010\uffcc\012\uffcc\013\104\014\077\015\103" +
    "\016\107\021\110\022\101\023\111\024\106\025\112\026" +
    "\105\027\uffcc\030\uffcc\041\uffcc\044\102\056\uffcc\057\uffcc" +
    "\060\uffcc\001\002\000\044\005\053\007\267\014\030\015" +
    "\007\020\041\042\020\043\016\046\042\047\023\065\027" +
    "\067\043\070\015\071\037\075\031\076\013\077\035\100" +
    "\025\001\002\000\004\010\266\001\002\000\004\010\265" +
    "\001\002\000\004\010\264\001\002\000\054\004\uffb5\006" +
    "\uffb5\010\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\041\uffb5\044\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\001\002\000\054\004\uffb3\006\uffb3\010\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\041\uffb3\044" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\001\002\000\054\004\uffb4" +
    "\006\uffb4\010\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\041\uffb4\044\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\001\002\000\042\005\053\014\030\015\007\020\041" +
    "\042\020\043\016\046\042\047\023\065\027\067\043\070" +
    "\015\071\037\075\031\076\013\077\035\100\025\001\002" +
    "\000\004\010\275\001\002\000\004\010\272\001\002\000" +
    "\006\010\uff8e\041\273\001\002\000\004\007\267\001\002" +
    "\000\004\010\uff8d\001\002\000\006\010\uff8c\041\276\001" +
    "\002\000\004\007\277\001\002\000\004\007\267\001\002" +
    "\000\004\010\uff8b\001\002\000\054\004\uffcb\006\uffcb\010" +
    "\uffcb\012\uffcb\013\104\014\077\015\103\016\107\021\110" +
    "\022\101\023\111\024\106\025\112\026\105\027\uffcb\030" +
    "\uffcb\041\uffcb\044\102\056\uffcb\057\uffcb\060\uffcb\001\002" +
    "\000\034\012\303\013\104\014\077\015\103\016\107\021" +
    "\110\022\101\023\111\024\106\025\112\026\105\044\102" +
    "\060\113\001\002\000\060\004\uffc2\006\uffc2\010\uffc2\011" +
    "\304\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\305" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\041\uffc2\044\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\001\002\000\042\005\053\014\030\015\007\020\041\042" +
    "\020\043\016\046\042\047\023\065\027\067\043\070\015" +
    "\071\037\075\031\076\013\077\035\100\025\001\002\000" +
    "\042\005\053\014\030\015\007\020\041\042\020\043\016" +
    "\046\042\047\023\065\027\067\043\070\015\071\037\075" +
    "\031\076\013\077\035\100\025\001\002\000\054\004\uffc3" +
    "\006\uffc3\010\uffc3\012\uffc3\013\104\014\077\015\103\016" +
    "\107\021\110\022\101\023\111\024\106\025\112\026\105" +
    "\027\uffc3\030\uffc3\041\uffc3\044\102\056\uffc3\057\uffc3\060" +
    "\uffc3\001\002\000\034\012\310\013\104\014\077\015\103" +
    "\016\107\021\110\022\101\023\111\024\106\025\112\026" +
    "\105\044\102\060\113\001\002\000\060\004\uffc1\006\uffc1" +
    "\010\uffc1\011\311\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\312\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\041\uffc1\044\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\001\002\000\042\005\053\014\030\015\007" +
    "\020\041\042\020\043\016\046\042\047\023\065\027\067" +
    "\043\070\015\071\037\075\031\076\013\077\035\100\025" +
    "\001\002\000\042\005\053\014\030\015\007\020\041\042" +
    "\020\043\016\046\042\047\023\065\027\067\043\070\015" +
    "\071\037\075\031\076\013\077\035\100\025\001\002\000" +
    "\054\004\uffc0\006\uffc0\010\uffc0\012\uffc0\013\104\014\077" +
    "\015\103\016\107\021\110\022\101\023\111\024\106\025" +
    "\112\026\105\027\uffc0\030\uffc0\041\uffc0\044\102\056\uffc0" +
    "\057\uffc0\060\uffc0\001\002\000\034\012\315\013\104\014" +
    "\077\015\103\016\107\021\110\022\101\023\111\024\106" +
    "\025\112\026\105\044\102\060\113\001\002\000\056\004" +
    "\uffbf\006\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\017\316\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\041\uffbf\044\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\001\002\000\042\005\053\014\030\015" +
    "\007\020\041\042\020\043\016\046\042\047\023\065\027" +
    "\067\043\070\015\071\037\075\031\076\013\077\035\100" +
    "\025\001\002\000\054\004\uffbe\006\uffbe\010\uffbe\012\uffbe" +
    "\013\104\014\077\015\103\016\107\021\110\022\101\023" +
    "\111\024\106\025\112\026\105\027\uffbe\030\uffbe\041\uffbe" +
    "\044\102\056\uffbe\057\uffbe\060\uffbe\001\002\000\054\004" +
    "\uffc8\006\uffc8\010\uffc8\012\uffc8\013\104\014\077\015\103" +
    "\016\107\021\110\022\101\023\111\024\106\025\112\026" +
    "\105\027\uffc8\030\uffc8\041\uffc8\044\102\056\uffc8\057\uffc8" +
    "\060\uffc8\001\002\000\054\004\uffca\006\uffca\010\uffca\012" +
    "\uffca\013\104\014\077\015\103\016\107\021\110\022\101" +
    "\023\111\024\106\025\112\026\105\027\uffca\030\uffca\041" +
    "\uffca\044\102\056\uffca\057\uffca\060\uffca\001\002\000\054" +
    "\004\uffc9\006\uffc9\010\uffc9\012\uffc9\013\104\014\077\015" +
    "\103\016\107\021\110\022\101\023\111\024\106\025\112" +
    "\026\105\027\uffc9\030\uffc9\041\uffc9\044\102\056\uffc9\057" +
    "\uffc9\060\uffc9\001\002\000\054\004\uffab\006\uffab\010\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\041\uffab\044\uffab\056\uffab\057\uffab\060\uffab\001\002\000" +
    "\054\004\uffd4\006\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\041\uffd4\044\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\001\002\000\042\005\053\014\030\015" +
    "\007\020\041\042\020\043\016\046\042\047\023\065\027" +
    "\067\043\070\015\071\037\075\031\076\013\077\035\100" +
    "\025\001\002\000\054\004\uffba\006\uffba\010\uffba\012\uffba" +
    "\013\uffba\014\uffba\015\uffba\016\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\041\uffba" +
    "\044\uffba\056\uffba\057\uffba\060\uffba\001\002\000\054\004" +
    "\uffb9\006\uffb9\010\uffb9\012\uffb9\013\104\014\077\015\103" +
    "\016\107\021\110\022\101\023\111\024\106\025\112\026" +
    "\105\027\uffb9\030\uffb9\041\uffb9\044\102\056\uffb9\057\uffb9" +
    "\060\113\001\002\000\054\004\uffd2\006\uffd2\010\uffd2\012" +
    "\uffd2\013\104\014\077\015\103\016\107\021\110\022\101" +
    "\023\111\024\106\025\112\026\105\027\uffd2\030\uffd2\041" +
    "\uffd2\044\102\056\uffd2\057\uffd2\060\113\001\002\000\004" +
    "\002\000\001\002\000\054\004\uffd0\006\uffd0\010\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\041" +
    "\uffd0\044\uffd0\056\uffd0\057\uffd0\060\uffd0\001\002\000\004" +
    "\004\uffa5\001\002\000\004\075\376\001\002\000\012\004" +
    "\uff85\011\337\017\340\041\336\001\002\000\004\075\uff88" +
    "\001\002\000\006\075\346\076\347\001\002\000\042\005" +
    "\053\014\030\015\007\020\041\042\020\043\016\046\042" +
    "\047\023\065\027\067\043\070\015\071\037\075\031\076" +
    "\013\077\035\100\025\001\002\000\036\004\uff86\013\104" +
    "\014\077\015\103\016\107\021\110\022\101\023\111\024" +
    "\106\025\112\026\105\041\342\044\102\060\113\001\002" +
    "\000\004\075\uff8a\001\002\000\004\075\345\001\002\000" +
    "\004\004\uff89\001\002\000\010\004\uff85\017\340\041\336" +
    "\001\002\000\004\012\373\001\002\000\004\012\350\001" +
    "\002\000\010\004\uff9b\011\351\017\352\001\002\000\004" +
    "\076\356\001\002\000\004\007\353\001\002\000\042\005" +
    "\053\014\030\015\007\020\041\042\020\043\016\046\042" +
    "\047\023\065\027\067\043\070\015\071\037\075\031\076" +
    "\013\077\035\100\025\001\002\000\004\010\355\001\002" +
    "\000\004\004\uff9c\001\002\000\004\012\357\001\002\000" +
    "\010\004\uff93\011\360\017\361\001\002\000\004\076\365" +
    "\001\002\000\004\007\362\001\002\000\004\007\267\001" +
    "\002\000\004\010\364\001\002\000\004\004\uff94\001\002" +
    "\000\004\012\366\001\002\000\006\004\uff91\017\367\001" +
    "\002\000\004\007\370\001\002\000\004\007\277\001\002" +
    "\000\004\010\372\001\002\000\004\004\uff92\001\002\000" +
    "\004\004\uff96\001\002\000\004\075\345\001\002\000\004" +
    "\004\uff87\001\002\000\004\004\uffa0\001\002\000\054\004" +
    "\uffcf\006\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\041\uffcf\044\uffcf\056\uffcf\057\uffcf" +
    "\060\uffcf\001\002\000\054\004\uffaa\006\uffaa\010\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\041" +
    "\uffaa\044\uffaa\056\uffaa\057\uffaa\060\uffaa\001\002\000\042" +
    "\005\053\014\030\015\007\020\041\042\020\043\016\046" +
    "\042\047\023\065\027\067\043\070\015\071\037\075\031" +
    "\076\013\077\035\100\025\001\002\000\006\011\u0104\050" +
    "\u0103\001\002\000\006\007\u0109\075\u010a\001\002\000\042" +
    "\005\053\014\030\015\007\020\041\042\020\043\016\046" +
    "\042\047\023\065\027\067\043\070\015\071\037\075\031" +
    "\076\013\077\035\100\025\001\002\000\034\012\u0106\013" +
    "\104\014\077\015\103\016\107\021\110\022\101\023\111" +
    "\024\106\025\112\026\105\044\102\060\113\001\002\000" +
    "\004\050\u0107\001\002\000\004\075\u0108\001\002\000\004" +
    "\034\uffda\001\002\000\042\005\053\014\030\015\007\020" +
    "\041\042\020\043\016\046\042\047\023\065\027\067\043" +
    "\070\015\071\037\075\031\076\013\077\035\100\025\001" +
    "\002\000\004\034\uffdc\001\002\000\004\010\u010c\001\002" +
    "\000\004\034\uffdb\001\002\000\034\004\u010e\013\104\014" +
    "\077\015\103\016\107\021\110\022\101\023\111\024\106" +
    "\025\112\026\105\044\102\060\113\001\002\000\042\005" +
    "\ufff2\014\ufff2\015\ufff2\020\ufff2\042\ufff2\043\ufff2\046\ufff2" +
    "\047\ufff2\065\ufff2\067\ufff2\070\ufff2\071\ufff2\075\ufff2\076" +
    "\ufff2\077\ufff2\100\ufff2\001\002\000\042\005\053\014\030" +
    "\015\007\020\041\042\020\043\016\046\042\047\023\065" +
    "\027\067\043\070\015\071\037\075\031\076\013\077\035" +
    "\100\025\001\002\000\012\004\u0111\027\067\030\073\056" +
    "\070\001\002\000\042\005\ufff1\014\ufff1\015\ufff1\020\ufff1" +
    "\042\ufff1\043\ufff1\046\ufff1\047\ufff1\065\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\001\002" +
    "\000\042\005\053\014\030\015\007\020\041\042\020\043" +
    "\016\046\042\047\023\065\027\067\043\070\015\071\037" +
    "\075\031\076\013\077\035\100\025\001\002\000\034\006" +
    "\u0114\013\104\014\077\015\103\016\107\021\110\022\101" +
    "\023\111\024\106\025\112\026\105\044\102\060\113\001" +
    "\002\000\072\005\ufff0\007\ufff0\014\ufff0\015\ufff0\020\ufff0" +
    "\031\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\040\ufff0\042" +
    "\ufff0\043\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\061\ufff0" +
    "\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\074\ufff0\075" +
    "\ufff0\076\ufff0\077\ufff0\100\ufff0\001\002\000\072\005\053" +
    "\007\050\014\030\015\007\020\041\031\026\033\044\034" +
    "\056\035\021\036\055\040\017\042\020\043\016\045\045" +
    "\046\042\047\023\051\032\061\034\065\027\066\006\067" +
    "\043\070\015\071\037\074\047\075\031\076\013\077\035" +
    "\100\025\001\002\000\102\002\uffef\005\uffef\007\uffef\010" +
    "\uffef\014\uffef\015\uffef\020\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\040\uffef\042\uffef\043\uffef\045" +
    "\uffef\046\uffef\047\uffef\051\uffef\061\uffef\064\uffef\065\uffef" +
    "\066\uffef\067\uffef\070\uffef\071\uffef\074\uffef\075\uffef\076" +
    "\uffef\077\uffef\100\uffef\001\002\000\042\005\053\014\030" +
    "\015\007\020\041\042\020\043\016\046\042\047\023\065" +
    "\027\067\043\070\015\071\037\075\031\076\013\077\035" +
    "\100\025\001\002\000\042\005\053\014\030\015\007\020" +
    "\041\042\020\043\016\046\042\047\023\065\027\067\043" +
    "\070\015\071\037\075\031\076\013\077\035\100\025\001" +
    "\002\000\042\005\053\014\030\015\007\020\041\042\020" +
    "\043\016\046\042\047\023\065\027\067\043\070\015\071" +
    "\037\075\031\076\013\077\035\100\025\001\002\000\042" +
    "\005\053\014\030\015\007\020\041\042\020\043\016\046" +
    "\042\047\023\065\027\067\043\070\015\071\037\075\031" +
    "\076\013\077\035\100\025\001\002\000\054\004\uffc6\006" +
    "\uffc6\010\uffc6\012\uffc6\013\104\014\077\015\103\016\107" +
    "\021\110\022\101\023\111\024\106\025\112\026\105\027" +
    "\uffc6\030\uffc6\041\uffc6\044\102\056\uffc6\057\uffc6\060\uffc6" +
    "\001\002\000\054\004\uffc4\006\uffc4\010\uffc4\012\uffc4\013" +
    "\104\014\077\015\103\016\107\021\110\022\101\023\111" +
    "\024\106\025\112\026\105\027\uffc4\030\uffc4\041\uffc4\044" +
    "\102\056\uffc4\057\uffc4\060\uffc4\001\002\000\054\004\uffc5" +
    "\006\uffc5\010\uffc5\012\uffc5\013\104\014\077\015\103\016" +
    "\107\021\110\022\101\023\111\024\106\025\112\026\105" +
    "\027\uffc5\030\uffc5\041\uffc5\044\102\056\uffc5\057\uffc5\060" +
    "\uffc5\001\002\000\054\004\uffc7\006\uffc7\010\uffc7\012\uffc7" +
    "\013\104\014\077\015\103\016\107\021\110\022\101\023" +
    "\111\024\106\025\112\026\105\027\uffc7\030\uffc7\041\uffc7" +
    "\044\102\056\uffc7\057\uffc7\060\uffc7\001\002\000\056\004" +
    "\uffbc\006\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\u0120\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\041\uffbc\044\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\001\002\000\042\005\053\014\030\015" +
    "\007\020\041\042\020\043\016\046\042\047\023\065\027" +
    "\067\043\070\015\071\037\075\031\076\013\077\035\100" +
    "\025\001\002\000\054\004\uffbb\006\uffbb\010\uffbb\012\uffbb" +
    "\013\104\014\077\015\103\016\107\021\110\022\101\023" +
    "\111\024\106\025\112\026\105\027\uffbb\030\uffbb\041\uffbb" +
    "\044\102\056\uffbb\057\uffbb\060\uffbb\001\002\000\042\005" +
    "\053\014\030\015\007\020\041\042\020\043\016\046\042" +
    "\047\023\065\027\067\043\070\015\071\037\075\031\076" +
    "\013\077\035\100\025\001\002\000\012\006\ufffb\027\067" +
    "\030\073\056\070\001\002\000\004\006\u0125\001\002\000" +
    "\072\005\053\007\050\014\030\015\007\020\041\031\026" +
    "\033\044\034\056\035\021\036\055\040\017\042\020\043" +
    "\016\045\045\046\042\047\023\051\032\061\034\065\027" +
    "\066\006\067\043\070\015\071\037\074\047\075\031\076" +
    "\013\077\035\100\025\001\002\000\004\032\ufffa\001\002" +
    "\000\004\032\u0128\001\002\000\072\005\053\007\050\014" +
    "\030\015\007\020\041\031\026\033\044\034\056\035\021" +
    "\036\055\040\017\042\020\043\016\045\045\046\042\047" +
    "\023\051\032\061\034\065\027\066\006\067\043\070\015" +
    "\071\037\074\047\075\031\076\013\077\035\100\025\001" +
    "\002\000\102\002\ufff9\005\ufff9\007\ufff9\010\ufff9\014\ufff9" +
    "\015\ufff9\020\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\040\ufff9\042\ufff9\043\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\051\ufff9\061\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9" +
    "\100\ufff9\001\002\000\102\002\uffe2\005\uffe2\007\uffe2\010" +
    "\uffe2\014\uffe2\015\uffe2\020\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\040\uffe2\042\uffe2\043\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\051\uffe2\061\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\067\uffe2\070\uffe2\071\uffe2\074\uffe2\075\uffe2\076" +
    "\uffe2\077\uffe2\100\uffe2\001\002\000\004\075\uff9d\001\002" +
    "\000\012\004\uff79\011\u012f\017\u0130\041\u012e\001\002\000" +
    "\004\004\uffa3\001\002\000\004\075\uff7c\001\002\000\004" +
    "\076\u0136\001\002\000\004\100\u0131\001\002\000\006\004" +
    "\uff7a\041\u0132\001\002\000\004\075\uff7e\001\002\000\004" +
    "\075\u0134\001\002\000\010\004\uff79\017\u0130\041\u012e\001" +
    "\002\000\004\004\uff7d\001\002\000\004\012\u0137\001\002" +
    "\000\006\004\uff99\017\u0138\001\002\000\004\007\u0139\001" +
    "\002\000\042\005\053\014\030\015\007\020\041\042\020" +
    "\043\016\046\042\047\023\065\027\067\043\070\015\071" +
    "\037\075\031\076\013\077\035\100\025\001\002\000\004" +
    "\010\u013b\001\002\000\004\004\uff9a\001\002\000\004\075" +
    "\u0134\001\002\000\004\004\uff7b\001\002\000\072\005\053" +
    "\007\050\014\030\015\007\020\041\031\026\033\044\034" +
    "\056\035\021\036\055\040\017\042\020\043\016\045\045" +
    "\046\042\047\023\051\032\061\034\065\027\066\006\067" +
    "\043\070\015\071\037\074\047\075\031\076\013\077\035" +
    "\100\025\001\002\000\004\033\u0140\001\002\000\004\005" +
    "\u0141\001\002\000\042\005\053\014\030\015\007\020\041" +
    "\042\020\043\016\046\042\047\023\065\027\067\043\070" +
    "\015\071\037\075\031\076\013\077\035\100\025\001\002" +
    "\000\012\006\ufff4\027\067\030\073\056\070\001\002\000" +
    "\004\006\u0144\001\002\000\004\004\u0145\001\002\000\102" +
    "\002\ufff3\005\ufff3\007\ufff3\010\ufff3\014\ufff3\015\ufff3\020" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\040\ufff3\042\ufff3\043\ufff3\045\ufff3\046\ufff3\047\ufff3\051" +
    "\ufff3\061\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3" +
    "\071\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\001" +
    "\002\000\004\005\u0147\001\002\000\042\005\053\014\030" +
    "\015\007\020\041\042\020\043\016\046\042\047\023\065" +
    "\027\067\043\070\015\071\037\075\031\076\013\077\035" +
    "\100\025\001\002\000\012\006\ufff7\027\067\030\073\056" +
    "\070\001\002\000\004\006\u014a\001\002\000\072\005\053" +
    "\007\050\014\030\015\007\020\041\031\026\033\044\034" +
    "\056\035\021\036\055\040\017\042\020\043\016\045\045" +
    "\046\042\047\023\051\032\061\034\065\027\066\006\067" +
    "\043\070\015\071\037\074\047\075\031\076\013\077\035" +
    "\100\025\001\002\000\102\002\ufff6\005\ufff6\007\ufff6\010" +
    "\ufff6\014\ufff6\015\ufff6\020\ufff6\031\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\040\ufff6\042\ufff6\043\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\051\ufff6\061\ufff6\064\ufff6\065\ufff6" +
    "\066\ufff6\067\ufff6\070\ufff6\071\ufff6\074\ufff6\075\ufff6\076" +
    "\ufff6\077\ufff6\100\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\040\002\021\003\050\004\023\010\051\011" +
    "\011\012\035\016\053\017\007\020\003\021\004\022\013" +
    "\025\010\026\037\032\045\033\032\001\001\000\004\036" +
    "\u0145\001\001\000\004\040\u013d\001\001\000\004\014\u012c" +
    "\001\001\000\004\025\u012a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\377\025\010\026\037\032\045\001" +
    "\001\000\002\001\001\000\006\006\332\025\333\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\327\025\010\026\037\032\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\323\025\010\026\037\032\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\220\025\010\026\037\032\045\001\001\000\002\001" +
    "\001\000\012\016\216\025\010\026\037\032\217\001\001" +
    "\000\012\016\215\025\010\026\037\032\045\001\001\000" +
    "\012\016\214\025\010\026\037\032\045\001\001\000\002" +
    "\001\001\000\004\007\171\001\001\000\004\023\071\001" +
    "\001\000\004\015\156\001\001\000\004\045\153\001\001" +
    "\000\034\004\152\010\051\011\011\012\035\016\053\017" +
    "\007\020\003\021\004\022\013\025\010\026\037\032\045" +
    "\033\032\001\001\000\002\001\001\000\012\016\061\025" +
    "\010\026\037\032\062\001\001\000\004\024\077\001\001" +
    "\000\012\016\056\025\010\026\037\032\045\001\001\000" +
    "\002\001\001\000\004\024\077\001\001\000\012\016\061" +
    "\025\010\026\037\032\062\001\001\000\014\016\140\025" +
    "\010\026\037\027\141\032\045\001\001\000\004\024\077" +
    "\001\001\000\004\023\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\130\001" +
    "\001\000\004\062\073\001\001\000\012\016\074\025\010" +
    "\026\037\032\075\001\001\000\004\024\077\001\001\000" +
    "\004\023\071\001\001\000\012\016\127\025\010\026\037" +
    "\032\045\001\001\000\004\050\125\001\001\000\012\016" +
    "\124\025\010\026\037\032\045\001\001\000\012\016\123" +
    "\025\010\026\037\032\045\001\001\000\012\016\122\025" +
    "\010\026\037\032\045\001\001\000\012\016\121\025\010" +
    "\026\037\032\045\001\001\000\012\016\120\025\010\026" +
    "\037\032\045\001\001\000\012\016\117\025\010\026\037" +
    "\032\045\001\001\000\012\016\116\025\010\026\037\032" +
    "\045\001\001\000\012\016\115\025\010\026\037\032\045" +
    "\001\001\000\012\016\114\025\010\026\037\032\045\001" +
    "\001\000\012\016\113\025\010\026\037\032\045\001\001" +
    "\000\002\001\001\000\004\024\077\001\001\000\004\024" +
    "\077\001\001\000\004\024\077\001\001\000\004\024\077" +
    "\001\001\000\004\024\077\001\001\000\004\024\077\001" +
    "\001\000\004\024\077\001\001\000\004\024\077\001\001" +
    "\000\004\024\077\001\001\000\004\024\077\001\001\000" +
    "\012\016\126\025\010\026\037\032\045\001\001\000\004" +
    "\024\077\001\001\000\004\024\077\001\001\000\012\016" +
    "\131\025\010\026\037\032\045\001\001\000\006\024\077" +
    "\047\132\001\001\000\002\001\001\000\012\016\134\025" +
    "\010\026\037\032\045\001\001\000\004\024\077\001\001" +
    "\000\012\016\074\025\010\026\037\032\136\001\001\000" +
    "\004\023\071\001\001\000\002\001\001\000\004\024\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\140\025\010\026\037" +
    "\027\146\032\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\154\004\023\010\051\011\011\012\035\016" +
    "\053\017\007\020\003\021\004\022\013\025\010\026\037" +
    "\032\045\033\032\001\001\000\034\004\152\010\051\011" +
    "\011\012\035\016\053\017\007\020\003\021\004\022\013" +
    "\025\010\026\037\032\045\033\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\164\001\001\000\004\015\165\001\001\000\002\001\001" +
    "\000\004\015\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\212\001\001\000\002" +
    "\001\001\000\012\016\175\025\010\026\037\032\045\001" +
    "\001\000\004\024\077\001\001\000\004\053\177\001\001" +
    "\000\004\007\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\140\025\010\026\037\027" +
    "\207\032\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\213\001\001\000\002\001" +
    "\001\000\004\024\077\001\001\000\004\024\077\001\001" +
    "\000\004\024\077\001\001\000\004\023\071\001\001\000" +
    "\004\024\077\001\001\000\012\016\222\025\010\026\037" +
    "\032\045\001\001\000\004\024\077\001\001\000\002\001" +
    "\001\000\004\013\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\230\025\010\026\037\032\045\001" +
    "\001\000\004\024\077\001\001\000\036\003\233\004\023" +
    "\010\051\011\011\012\035\016\053\017\007\020\003\021" +
    "\004\022\013\025\010\026\037\032\045\033\032\001\001" +
    "\000\002\001\001\000\034\004\152\010\051\011\011\012" +
    "\035\016\053\017\007\020\003\021\004\022\013\025\010" +
    "\026\037\032\045\033\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\241\004\023\010\051\011\011\012\035\016\053\017" +
    "\007\020\003\021\004\022\013\025\010\026\037\032\045" +
    "\033\032\001\001\000\034\004\152\010\051\011\011\012" +
    "\035\016\053\017\007\020\003\021\004\022\013\025\010" +
    "\026\037\032\045\033\032\001\001\000\034\004\243\010" +
    "\051\011\011\012\035\016\053\017\007\020\003\021\004" +
    "\022\013\025\010\026\037\032\045\033\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\321\025\010\026\037\032\045\001\001\000\012\016" +
    "\320\025\010\026\037\032\045\001\001\000\002\001\001" +
    "\000\012\016\317\025\010\026\037\032\045\001\001\000" +
    "\012\016\301\025\010\026\037\032\045\001\001\000\012" +
    "\016\300\025\010\026\037\032\045\001\001\000\012\016" +
    "\256\025\010\026\037\032\045\001\001\000\020\016\140" +
    "\025\010\026\037\027\262\030\260\031\261\032\045\001" +
    "\001\000\004\024\077\001\001\000\016\016\140\025\010" +
    "\026\037\027\270\030\267\032\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\140\025" +
    "\010\026\037\027\270\032\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\277" +
    "\001\001\000\004\030\267\001\001\000\002\001\001\000" +
    "\004\024\077\001\001\000\004\024\077\001\001\000\002" +
    "\001\001\000\012\016\306\025\010\026\037\032\045\001" +
    "\001\000\012\016\305\025\010\026\037\032\045\001\001" +
    "\000\004\024\077\001\001\000\004\024\077\001\001\000" +
    "\002\001\001\000\012\016\313\025\010\026\037\032\045" +
    "\001\001\000\012\016\312\025\010\026\037\032\045\001" +
    "\001\000\004\024\077\001\001\000\004\024\077\001\001" +
    "\000\002\001\001\000\012\016\316\025\010\026\037\032" +
    "\045\001\001\000\004\024\077\001\001\000\004\024\077" +
    "\001\001\000\004\024\077\001\001\000\004\024\077\001" +
    "\001\000\002\001\001\000\004\024\077\001\001\000\012" +
    "\016\326\025\010\026\037\032\045\001\001\000\002\001" +
    "\001\000\004\024\077\001\001\000\004\024\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\373\001\001" +
    "\000\002\001\001\000\012\016\340\025\010\026\037\032" +
    "\045\001\001\000\004\024\077\001\001\000\004\051\342" +
    "\001\001\000\004\006\343\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\140\025\010\026\037\027\353\032\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\362" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\077\001\001\000" +
    "\012\016\u010c\025\010\026\037\032\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\u0104\025\010\026" +
    "\037\032\045\001\001\000\004\024\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\140\025\010\026\037\027\u010a\032\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\077\001\001\000\004\042\u010e\001\001\000\012\016\074" +
    "\025\010\026\037\032\u010f\001\001\000\004\023\071\001" +
    "\001\000\004\043\u0111\001\001\000\012\016\u0112\025\010" +
    "\026\037\032\045\001\001\000\004\024\077\001\001\000" +
    "\004\044\u0114\001\001\000\034\004\u0115\010\051\011\011" +
    "\012\035\016\053\017\007\020\003\021\004\022\013\025" +
    "\010\026\037\032\045\033\032\001\001\000\002\001\001" +
    "\000\012\016\u011d\025\010\026\037\032\045\001\001\000" +
    "\012\016\u011c\025\010\026\037\032\045\001\001\000\012" +
    "\016\u011b\025\010\026\037\032\045\001\001\000\012\016" +
    "\u011a\025\010\026\037\032\045\001\001\000\004\024\077" +
    "\001\001\000\004\024\077\001\001\000\004\024\077\001" +
    "\001\000\004\024\077\001\001\000\002\001\001\000\012" +
    "\016\u0120\025\010\026\037\032\045\001\001\000\004\024" +
    "\077\001\001\000\012\016\074\025\010\026\037\032\u0122" +
    "\001\001\000\006\023\071\034\u0123\001\001\000\002\001" +
    "\001\000\034\004\u0125\010\051\011\011\012\035\016\053" +
    "\017\007\020\003\021\004\022\013\025\010\026\037\032" +
    "\045\033\032\001\001\000\004\035\u0126\001\001\000\004" +
    "\005\u0128\001\001\000\034\004\u0129\010\051\011\011\012" +
    "\035\016\053\017\007\020\003\021\004\022\013\025\010" +
    "\026\037\032\045\033\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\u013b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u0132\001\001" +
    "\000\004\014\u0134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\140\025\010\026\037\027\u0139\032\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u013c" +
    "\001\001\000\002\001\001\000\034\004\u013e\010\051\011" +
    "\011\012\035\016\053\017\007\020\003\021\004\022\013" +
    "\025\010\026\037\032\045\033\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\074\025\010\026\037" +
    "\032\u0141\001\001\000\006\023\071\041\u0142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\074\025\010\026\037\032\u0147\001" +
    "\001\000\006\023\071\037\u0148\001\001\000\002\001\001" +
    "\000\034\004\u014a\010\051\011\011\012\035\016\053\017" +
    "\007\020\003\021\004\022\013\025\010\026\037\032\045" +
    "\033\032\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    boolean c = false;
    String x = "-1";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lista ::= lista_sent 
            {
              Object RESULT =null;
		Compilador.imprimeResultados();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lista EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sent ::= lista_sent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= exp PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= declaracion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Compilador.etiqueta(c.getA());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Compilador.goToLabel(tag);Compilador.etiqueta(c.getB());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= if_tag AP cond NT$0 CP sent NT$1 else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Compilador.etiqueta(tag);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Compilador.etiqueta(tag);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Compilador.etiqueta(c.getA());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= while_tag NT$2 AP cond NT$3 CP sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Compilador.goToLabel(tag);Compilador.etiqueta(c.getB());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Compilador.etiqueta(tag);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Compilador.etiqueta(c.getA());Compilador.goToLabel(tag);Compilador.etiqueta(c.getB());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sent ::= do_tag NT$4 sent WHILE AP cond NT$5 CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Compilador.etiqueta(tag);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = Compilador.generarTag();Compilador.etiqueta(RESULT.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Compilador.goToLabel(tag); Compilador.etiqueta(c.getA());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent ::= for_tag AP exp PYC NT$6 cond PYC NT$7 exp CP NT$8 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Compilador.goToLabel(RESULT.toString());Compilador.etiqueta(c.getB());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent ::= for_in DO sent 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag tag = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Compilador.goToLabel(tag.getA());Compilador.etiqueta(tag.getB());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sent ::= PRINT exp PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Compilador.print(e,c);c=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent ::= PRINT AP ALL lista_enteros CLL CP PYC 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Compilador.printList(l,c); c=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sent ::= PRINT AP STRINGTEXT CP PYC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Compilador.printString(t); c =false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =null;
Compilador.aumentarContexto();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent ::= ALL NT$9 lista_sent CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Compilador.disminuirContexto();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent ::= SWITCH AP exp CP ALL lista_cases CLL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sent ::= ERROR 
            {
              Object RESULT =null;
		Compilador.error("Comentarios anidados");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // for_tag ::= FOR 
            {
              String RESULT =null;
		RESULT = Compilador.generarTag();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tag",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if_tag ::= IF 
            {
              String RESULT =null;
		RESULT = Compilador.generarTag();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_tag",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // while_tag ::= WHILE 
            {
              String RESULT =null;
		RESULT = Compilador.generarTag();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_tag",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // do_tag ::= DO 
            {
              String RESULT =null;
		RESULT = Compilador.generarTag();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_tag",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // else ::= ELSE sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_cases ::= CASE exp DP lista_sent 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_cases",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_cases ::= CASE exp DP lista_sent BREAK PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_cases",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_cases ::= DEFAULT DP lista_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_cases",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_cases ::= CASE exp DP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_cases",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_cases ::= CASE exp DP BREAK PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_cases",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // for_in ::= for_tag IDENT IN IDENT 
            {
              Tag RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Compilador.checkDeclaracion(i1);Compilador.checkDeclaracionArray(i1,i2);RESULT = Compilador.forIn(i1,i2,tag,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_in",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // for_in ::= for_tag IDENT IN ALL lista_enteros CLL 
            {
              Tag RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Compilador.checkDeclaracion(i1);RESULT = Compilador.forIn(i1,"",tag,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_in",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // for_in ::= for_tag IDENT AC exp CC IN IDENT 
            {
              Tag RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.forIn(k+"["+e+"]",i2,tag,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_in",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp MAS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operacion(e1,e2,"+");c=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp MENOS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operacion(e1,e2,"-");c=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp POR exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operacion(e1,e2,"*");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp DIV exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operacion(e1,e2,"/");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp MOD exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operacion(e1,Compilador.operacion(Compilador.operacion(e1,e2 ,"/"),e2,"*"),"-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= MENOS exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operacion("",e,"-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= CINT exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operacion("",e,"(int)");c=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= CFLOAT exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operacion("",e,"(float)");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= CCHAR exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; x="char";c=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= INCR IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.prepost("PRE" , i, i + " + 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= DECR IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.prepost("PRE" , i, i + " - 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= IDENT INCR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Compilador.prepost("POST", i, i + " + 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= IDENT DECR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Compilador.prepost("POST", i, i + " - 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= IDENT ASIG exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(Compilador.isType(k,"char"))x="char";RESULT = Compilador.asig(k,v,x,false); x="-1";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= IDENT MASIGUAL exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.asig(k,k + " + " + v,"-1",false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= IDENT MENOSIGUAL exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.asig(k,k + " - " + v,"-1",false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= IDENT PORIGUAL exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.asig(k,k + " * " + v,"-1",false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= IDENT ENTREIGUAL exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.asig(k,k + " / " + v,"-1",false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= ENTERO MASIGUAL exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Compilador.error("operacion no valida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= ENTERO MENOSIGUAL exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Compilador.error("operacion no valida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= ENTERO PORIGUAL exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Compilador.error("operacion no valida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= ENTERO ENTREIGUAL exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Compilador.error("operacion no valida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= IDENT AC exp CC ASIG exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(Compilador.isType(k,"char"))c=true;Compilador.checkRango(k,e); RESULT = Compilador.asig(k,v,e,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= IDENT AC exp CC 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Compilador.checkRango(k,e);c=Compilador.isType(k,"char");RESULT = Compilador.operacion( k + "[" + e + "]","","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= IDENT AC exp CC AC exp CC 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Compilador.checkRangoMultiple(k,e1,e2,""); String pos = Compilador.calculaMultiArray(k,e1,e2,"");RESULT = Compilador.operacion(k + "[" + pos + "]","","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= IDENT AC exp CC AC exp CC ASIG exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Compilador.checkRangoMultiple(k,e1,e2,""); String pos = Compilador.calculaMultiArray(k,e1,e2,"");RESULT = Compilador.asig(k,v,pos,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= IDENT AC exp CC AC exp CC AC exp CC 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Compilador.checkRangoMultiple(k,e1,e2,e3); String pos = Compilador.calculaMultiArray(k,e1,e2,e3);RESULT = Compilador.operacion(k + "[" + pos + "]","","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= IDENT AC exp CC AC exp CC AC exp CC ASIG exp 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Compilador.checkRangoMultiple(k,e1,e2,e3); String pos = Compilador.calculaMultiArray(k,e1,e2,e3);RESULT = Compilador.asig(k,v,pos,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.checkDeclaracion(i); c = Compilador.checkChar(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= puntero IDENT 
            {
              String RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Compilador.checkDeclaracion(k);RESULT = Compilador.puntero(tag.length(),k);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= puntero IDENT ASIG exp 
            {
              String RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.asig("*"+k,e,"-1",false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= AMPERSAND IDENT 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operacion("&"+k,"","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= AMPERSAND AMPERSAND exp 
            {
              String RESULT =null;
		RESULT = "0"; Compilador.error("operacion no valida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp ::= REAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp ::= AP exp CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp ::= IDENT ASIG ALL lista_enteros CLL 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(Compilador.isType(k,"char"))c=true;RESULT = Compilador.inicializaArray(k,l,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exp ::= IDENT ASIG ALL lista_multiple CLL 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<String>> l = (ArrayList<ArrayList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Compilador.inicializaArrayMultiple(k,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp ::= IDENT ASIG ALL lista_triple CLL 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<ArrayList<String>>> l = (ArrayList<ArrayList<ArrayList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Compilador.inicializaArrayTriple(k,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$10 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Compilador.etiqueta(c.getA());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$11 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT = Compilador.asig("$t0",op1,"-1",false);Compilador.goToLabel(tag);Compilador.etiqueta(c.getB());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp ::= cond ternario NT$10 exp NT$11 DP exp 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.asig("$t0",op2,"-1",false);Compilador.etiqueta(tag);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$12 ::= 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT = Compilador.asig("$t0",e1,"-1",false);System.out.println("if(" + e1 + "!=" + 0 + ") goto " + tag + " ;");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp ::= exp elvis NT$12 exp 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.asig("$t0",e2,"-1",false); Compilador.etiqueta(tag);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp ::= CHARTEXT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.creaChar(t); c=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp ::= operador 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp ::= IDENT PUNTO LENGTH 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		c=false;RESULT = Compilador.operacion("$"+k+"_length","","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operador ::= MONTE exp 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operaChar("MONTE",t);c=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operador ::= MAYUS exp 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operaChar("MAYUS",t);c=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador ::= NEG exp 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operaChar("NEG",t);c=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // elvis ::= ELVIS 
            {
              String RESULT =null;
		Compilador.declaracion("int","$t0","0"); RESULT = Compilador.generarTag();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elvis",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ternario ::= INTERR 
            {
              String RESULT =null;
		Compilador.declaracion("int","$t0","0"); RESULT = Compilador.generarTag();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ternario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracion ::= INT lista_variables_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declaracion ::= FLOAT lista_variables_float 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declaracion ::= CHAR lista_variables_char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracion ::= array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaracion ::= array_multiple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declaracion ::= INT puntero IDENT 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.declaracion(tag+"int",k,"0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaracion ::= STRING lista_variables_string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // puntero ::= POR 
            {
              String RESULT =null;
		RESULT = "*";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntero",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // puntero ::= POR puntero 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		p+="*"; RESULT=p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntero",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // array ::= INT IDENT AC ENTERO CC ASIG ALL lista_enteros CLL 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Compilador.declaracionArray("int",k,e,"","","");Compilador.inicializaArray(k,l,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // array ::= INT IDENT AC ENTERO CC 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Compilador.declaracionArray("int",k,l,"","","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // array ::= CHAR IDENT AC ENTERO CC ASIG ALL lista_enteros CLL 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Compilador.declaracionArray("char",k,e,"","","");Compilador.inicializaArray(k,l,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // array ::= CHAR IDENT AC ENTERO CC 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Compilador.declaracionArray("char",k,l,"","","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // array ::= FLOAT IDENT AC ENTERO CC ASIG ALL lista_enteros CLL 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Compilador.declaracionArray("float",k,e,"","","");Compilador.inicializaArray(k,l,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // array ::= FLOAT IDENT AC ENTERO CC 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Compilador.declaracionArray("float",k,l,"","","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // array ::= INT IDENT AC IDENT CC 
            {
              Object RESULT =null;
		Compilador.error("Solo se permiten array con longitud entera");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // array ::= FLOAT IDENT AC IDENT CC 
            {
              Object RESULT =null;
		Compilador.error("Solo se permiten array con longitud entera");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // array_multiple ::= INT IDENT AC ENTERO CC AC ENTERO CC ASIG ALL lista_multiple CLL 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<String>> l = (ArrayList<ArrayList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x = Integer.parseInt(e1) * Integer.parseInt(e2); RESULT = Compilador.declaracionArray("int",k,Integer.toString(x),e1,e2,"");Compilador.inicializaArrayMultiple(k,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_multiple",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // array_multiple ::= INT IDENT AC ENTERO CC AC ENTERO CC 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x = Integer.parseInt(e1) * Integer.parseInt(e2); RESULT = Compilador.declaracionArray("int",k,Integer.toString(x),e1,e2,"");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_multiple",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // array_multiple ::= INT IDENT AC ENTERO CC AC ENTERO CC AC ENTERO CC ASIG ALL lista_triple CLL 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<ArrayList<String>>> l = (ArrayList<ArrayList<ArrayList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x = Integer.parseInt(e1) * Integer.parseInt(e2) * Integer.parseInt(e3); RESULT = Compilador.declaracionArray("int",k,Integer.toString(x),e1,e2,e3);Compilador.inicializaArrayTriple(k,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_multiple",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // array_multiple ::= INT IDENT AC ENTERO CC AC ENTERO CC AC ENTERO CC 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x = Integer.parseInt(e1) * Integer.parseInt(e2) * Integer.parseInt(e3); RESULT = Compilador.declaracionArray("int",k,Integer.toString(x),e1,e2,e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_multiple",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // lista_enteros ::= exp 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> as = new ArrayList<>(); as.add(e); RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_enteros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lista_enteros ::= exp COMA lista_enteros 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> m = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		m.add(e); RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_enteros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lista_multiple ::= ALL lista_enteros CLL 
            {
              ArrayList<ArrayList<String>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<ArrayList<String>> as = new ArrayList<>(); as.add(e); RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_multiple",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lista_multiple ::= ALL lista_enteros CLL COMA lista_multiple 
            {
              ArrayList<ArrayList<String>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<String>> m = (ArrayList<ArrayList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		m.add(e); RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_multiple",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lista_triple ::= ALL lista_multiple CLL 
            {
              ArrayList<ArrayList<ArrayList<String>>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<String>> e = (ArrayList<ArrayList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<ArrayList<ArrayList<String>>> as = new ArrayList<>(); as.add(e); RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_triple",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lista_triple ::= ALL lista_multiple CLL COMA lista_triple 
            {
              ArrayList<ArrayList<ArrayList<String>>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<ArrayList<String>> e = (ArrayList<ArrayList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<ArrayList<String>>> m = (ArrayList<ArrayList<ArrayList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		m.add(e); RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_triple",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$13 ::= 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = Compilador.declaracion("int",k,v);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // lista_variables_int ::= IDENT ASIG exp COMA NT$13 lista_variables_int 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_int",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$14 ::= 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = Compilador.declaracion("int",k,"0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // lista_variables_int ::= IDENT COMA NT$14 lista_variables_int 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_int",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // lista_variables_int ::= IDENT ASIG exp 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.declaracion("int",k,v);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_int",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // lista_variables_int ::= IDENT 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.declaracion("int",k,"0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_int",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$15 ::= 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = Compilador.declaracion("float",k,v);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // lista_variables_float ::= IDENT ASIG exp COMA NT$15 lista_variables_float 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_float",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$16 ::= 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = Compilador.declaracion("float",k,"0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // lista_variables_float ::= IDENT COMA NT$16 lista_variables_float 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_float",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // lista_variables_float ::= IDENT ASIG exp 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.declaracion("float",k,v);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_float",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // lista_variables_float ::= IDENT 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.declaracion("float",k,"0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_float",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$17 ::= 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT =Compilador.declaracion("char",k,Compilador.creaChar(v));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lista_variables_char ::= IDENT ASIG CHARTEXT COMA NT$17 lista_variables_char 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_char",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$18 ::= 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = Compilador.declaracion("char",k,"0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // lista_variables_char ::= IDENT COMA NT$18 lista_variables_char 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_char",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // lista_variables_char ::= IDENT ASIG CHARTEXT 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.declaracion("char",k,Compilador.creaChar(v));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_char",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // lista_variables_char ::= IDENT 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.declaracion("char",k,"0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_char",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$19 ::= 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = Compilador.declaracion("String",k,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // lista_variables_string ::= IDENT ASIG STRINGTEXT COMA NT$19 lista_variables_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_string",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$20 ::= 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = Compilador.declaracion("String",k,""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lista_variables_string ::= IDENT COMA NT$20 lista_variables_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_string",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // lista_variables_string ::= IDENT ASIG STRINGTEXT 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.declaracion("String",k,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_string",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // lista_variables_string ::= IDENT 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.declaracion("String",k,""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables_string",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // cond ::= exp IGUAL exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.condicion("IGUAL"  ,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // cond ::= exp DIST exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.condicion("DIST"   ,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // cond ::= exp MENOR exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.condicion("MENOR"  ,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // cond ::= exp MAYOR exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.condicion("MAYOR"  ,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // cond ::= exp MAYOREQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.condicion("MAYOREQ",e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // cond ::= exp MENOREQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.condicion("MENOREQ",e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // cond ::= NEG cond 
            {
              Tag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operador("NOT",c,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$21 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Compilador.etiqueta(c1.getA());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // cond ::= cond AND NT$21 cond 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operador("AND",c1,c2) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$22 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Compilador.etiqueta(c1.getB());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cond ::= cond OR NT$22 cond 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Compilador.operador("OR" ,c1,c2) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // cond ::= AP cond CP 
            {
              Tag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
