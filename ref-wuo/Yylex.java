/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>PLXC.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\64\1\20\1\20\1\20\1\20\22\0\1\64\1\40\1\11"+
    "\2\0\1\33\1\36\1\7\1\23\1\24\1\17\1\31\1\22\1\5"+
    "\1\3\1\16\1\1\11\2\1\35\1\21\1\41\1\32\1\42\1\34"+
    "\1\0\4\14\1\4\1\14\24\6\1\27\1\10\1\30\3\0\1\60"+
    "\1\15\1\61\1\54\1\47\1\45\1\63\1\53\1\44\1\6\1\62"+
    "\1\50\1\6\1\46\1\55\1\57\1\6\1\56\1\51\1\12\1\13"+
    "\1\6\1\52\3\6\1\25\1\43\1\26\1\37\6\0\1\20\32\0"+
    "\1\64\u15df\0\1\64\u097f\0\13\64\35\0\1\20\1\20\5\0\1\64"+
    "\57\0\1\64\u0fa0\0\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\2\1\1\4"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\1\11\4\2\0"+
    "\1\33\1\34\1\35\3\0\1\36\1\0\1\4\1\10"+
    "\1\0\1\37\1\40\3\0\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\10\4\1\55\3\4\1\0\1\56\3\0\1\4\4\0"+
    "\1\57\1\4\1\60\11\4\1\33\4\0\1\4\3\0"+
    "\1\4\1\61\6\4\1\62\1\63\3\0\1\64\1\65"+
    "\2\0\1\66\3\4\1\67\1\4\1\70\2\0\1\71"+
    "\1\72\1\73\1\74\1\4\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\65\0\65\0\65\0\u027c"+
    "\0\65\0\65\0\65\0\65\0\65\0\u02b1\0\u02e6\0\65"+
    "\0\u031b\0\65\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601"+
    "\0\u0636\0\152\0\324\0\u066b\0\65\0\65\0\u06a0\0\u06d5"+
    "\0\u01a8\0\u01a8\0\u070a\0\u073f\0\u0774\0\u07a9\0\65\0\65"+
    "\0\u07de\0\u0813\0\u0848\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\u0109\0\u087d\0\u08b2"+
    "\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0109"+
    "\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\65\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0109\0\u0cd6\0\u0109"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u0109\0\u10c5\0\u10fa\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u0109\0\u0109\0\u1203\0\u1238\0\u126d\0\u0109"+
    "\0\65\0\u12a2\0\u12d7\0\u0109\0\u130c\0\u1341\0\u1376\0\u0109"+
    "\0\u13ab\0\u0109\0\u13e0\0\u1415\0\65\0\u0109\0\u0109\0\u0109"+
    "\0\u144a\0\65\0\u0109";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\6\1\10"+
    "\1\2\1\11\3\6\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\6\1\43\1\44\1\45"+
    "\1\46\1\6\1\47\2\6\1\50\1\6\1\51\2\6"+
    "\1\15\66\0\2\52\1\53\62\0\2\4\1\53\62\0"+
    "\2\54\63\0\2\6\1\0\1\6\1\0\1\6\3\0"+
    "\4\6\26\0\20\6\6\0\1\55\24\0\1\56\32\0"+
    "\7\57\1\0\1\60\54\57\4\0\1\61\1\0\1\61"+
    "\1\0\1\61\1\62\1\61\1\63\2\61\26\0\20\61"+
    "\2\0\2\6\1\0\1\6\1\0\1\6\3\0\4\6"+
    "\26\0\12\6\1\64\5\6\17\0\1\65\1\66\12\0"+
    "\1\67\64\0\1\70\76\0\1\71\1\72\13\0\1\73"+
    "\34\0\1\74\1\75\64\0\1\76\67\0\1\77\65\0"+
    "\1\100\66\0\1\101\56\0\1\102\64\0\1\103\64\0"+
    "\1\104\75\0\1\105\22\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\26\0\1\6\1\106\1\107\15\6"+
    "\2\0\2\6\1\0\1\6\1\0\1\6\3\0\4\6"+
    "\26\0\4\6\1\110\4\6\1\111\6\6\2\0\2\6"+
    "\1\0\1\6\1\0\1\6\3\0\4\6\26\0\4\6"+
    "\1\112\13\6\2\0\2\6\1\0\1\6\1\0\1\6"+
    "\3\0\4\6\26\0\3\6\1\113\14\6\2\0\2\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\114\3\6\26\0"+
    "\6\6\1\115\11\6\2\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\26\0\7\6\1\116\10\6\2\0"+
    "\2\6\1\0\1\6\1\0\1\6\3\0\4\6\26\0"+
    "\3\6\1\117\5\6\1\120\6\6\2\0\2\6\1\0"+
    "\1\6\1\0\1\6\3\0\4\6\26\0\12\6\1\121"+
    "\5\6\2\0\2\6\1\0\1\6\1\0\1\6\3\0"+
    "\4\6\26\0\7\6\1\122\4\6\1\123\3\6\2\0"+
    "\2\54\1\0\1\124\42\0\1\124\24\0\1\125\64\0"+
    "\4\57\1\126\1\0\1\57\27\0\2\57\7\0\1\57"+
    "\7\0\2\127\1\0\1\130\1\0\1\61\1\0\1\61"+
    "\1\62\1\61\1\63\2\130\26\0\1\61\1\130\1\61"+
    "\1\130\4\61\1\130\3\61\2\130\2\61\2\0\2\6"+
    "\1\0\1\6\1\0\1\6\3\0\4\6\26\0\3\6"+
    "\1\131\14\6\1\0\20\65\1\0\44\65\17\66\1\132"+
    "\45\66\46\0\1\133\66\0\1\134\67\0\1\135\12\0"+
    "\2\6\1\0\1\6\1\0\1\6\3\0\1\136\3\6"+
    "\26\0\20\6\2\0\2\6\1\0\1\6\1\0\1\6"+
    "\3\0\4\6\26\0\11\6\1\137\6\6\2\0\2\6"+
    "\1\0\1\6\1\0\1\6\3\0\4\6\26\0\12\6"+
    "\1\140\5\6\2\0\2\6\1\0\1\6\1\0\1\6"+
    "\3\0\4\6\26\0\5\6\1\141\12\6\2\0\2\6"+
    "\1\0\1\6\1\0\1\6\3\0\4\6\26\0\2\6"+
    "\1\142\15\6\2\0\2\6\1\0\1\6\1\0\1\6"+
    "\3\0\4\6\26\0\12\6\1\143\5\6\2\0\2\6"+
    "\1\0\1\6\1\0\1\6\3\0\4\6\26\0\1\144"+
    "\17\6\2\0\2\6\1\0\1\6\1\0\1\6\3\0"+
    "\4\6\26\0\1\145\17\6\2\0\2\6\1\0\1\6"+
    "\1\0\1\6\3\0\4\6\26\0\1\6\1\146\16\6"+
    "\2\0\2\6\1\0\1\6\1\0\1\6\3\0\4\6"+
    "\26\0\1\147\17\6\2\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\26\0\14\6\1\150\3\6\2\0"+
    "\2\6\1\0\1\6\1\0\1\6\3\0\4\6\26\0"+
    "\5\6\1\151\12\6\2\0\2\152\2\0\1\153\23\0"+
    "\1\153\34\0\2\154\1\0\1\154\7\0\2\154\27\0"+
    "\1\154\1\0\1\154\4\0\1\154\3\0\2\154\4\0"+
    "\2\155\1\0\1\155\7\0\2\155\27\0\1\155\1\0"+
    "\1\155\4\0\1\155\3\0\2\155\4\0\2\155\1\0"+
    "\1\156\1\0\1\61\1\0\1\61\1\62\1\61\1\63"+
    "\2\156\26\0\1\61\1\156\1\61\1\156\4\61\1\156"+
    "\3\61\2\156\2\61\2\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\26\0\14\6\1\157\3\6\1\0"+
    "\16\66\1\15\1\132\45\66\12\0\1\160\127\0\1\161"+
    "\67\0\1\162\5\0\2\6\1\0\1\6\1\0\1\6"+
    "\3\0\4\6\26\0\14\6\1\163\3\6\2\0\2\6"+
    "\1\0\1\6\1\0\1\6\3\0\4\6\26\0\3\6"+
    "\1\164\14\6\2\0\2\6\1\0\1\6\1\0\1\6"+
    "\3\0\4\6\26\0\17\6\1\165\2\0\2\6\1\0"+
    "\1\6\1\0\1\6\3\0\4\6\26\0\1\166\17\6"+
    "\2\0\2\6\1\0\1\6\1\0\1\6\3\0\1\167"+
    "\3\6\26\0\20\6\2\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\26\0\4\6\1\170\13\6\2\0"+
    "\2\6\1\0\1\6\1\0\1\6\3\0\4\6\26\0"+
    "\14\6\1\171\3\6\2\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\26\0\2\6\1\172\15\6\2\0"+
    "\2\6\1\0\1\6\1\0\1\6\3\0\4\6\26\0"+
    "\12\6\1\173\5\6\2\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\26\0\3\6\1\174\14\6\2\0"+
    "\2\152\63\0\2\175\1\0\1\175\7\0\2\175\27\0"+
    "\1\175\1\0\1\175\4\0\1\175\3\0\2\175\4\0"+
    "\2\176\1\0\1\176\7\0\2\176\27\0\1\176\1\0"+
    "\1\176\4\0\1\176\3\0\2\176\4\0\2\176\1\0"+
    "\1\177\1\0\1\61\1\0\1\61\1\62\1\61\1\63"+
    "\2\177\26\0\1\61\1\177\1\61\1\177\4\61\1\177"+
    "\3\61\2\177\2\61\2\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\26\0\16\6\1\200\1\6\25\0"+
    "\1\201\120\0\1\202\62\0\1\203\7\0\2\6\1\0"+
    "\1\6\1\0\1\6\3\0\1\204\3\6\26\0\20\6"+
    "\2\0\2\6\1\0\1\6\1\0\1\6\3\0\1\205"+
    "\3\6\26\0\20\6\2\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\26\0\2\6\1\206\15\6\2\0"+
    "\2\6\1\0\1\6\1\0\1\6\3\0\4\6\26\0"+
    "\15\6\1\207\2\6\2\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\26\0\3\6\1\210\14\6\2\0"+
    "\2\6\1\0\1\6\1\0\1\6\3\0\1\6\1\211"+
    "\2\6\26\0\20\6\2\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\1\212\3\6\26\0\20\6\2\0\2\213"+
    "\1\0\1\213\7\0\2\213\27\0\1\213\1\0\1\213"+
    "\4\0\1\213\3\0\2\213\4\0\2\61\1\0\1\61"+
    "\7\0\2\61\27\0\1\61\1\0\1\61\4\0\1\61"+
    "\3\0\2\61\4\0\2\61\1\0\1\61\1\0\1\61"+
    "\1\0\1\61\1\62\1\61\1\63\2\61\26\0\20\61"+
    "\13\0\1\214\76\0\1\215\41\0\2\6\1\0\1\6"+
    "\1\0\1\6\3\0\4\6\26\0\7\6\1\216\10\6"+
    "\2\0\2\6\1\0\1\6\1\0\1\6\3\0\4\6"+
    "\26\0\17\6\1\217\2\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\26\0\7\6\1\220\10\6\2\0"+
    "\2\6\1\0\1\6\1\0\1\6\3\0\4\6\26\0"+
    "\4\6\1\221\13\6\2\0\2\57\1\0\1\57\7\0"+
    "\2\57\27\0\1\57\1\0\1\57\4\0\1\57\3\0"+
    "\2\57\27\0\1\222\41\0\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\1\223\3\6\26\0\20\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5247];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\3\11\1\1\5\11\2\1\1\11"+
    "\1\1\1\11\17\1\2\0\1\1\2\11\3\0\1\1"+
    "\1\0\2\1\1\0\2\11\3\0\12\11\16\1\1\0"+
    "\1\11\3\0\1\1\4\0\15\1\4\0\1\1\3\0"+
    "\12\1\3\0\1\1\1\11\2\0\7\1\2\0\1\11"+
    "\4\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("ilegal char: "+yytext());
            } 
            // fall through
          case 63: break;
          case 2: 
            { return new Symbol(sym.ENTERO,yytext());
            } 
            // fall through
          case 64: break;
          case 3: 
            { return new Symbol(sym.PUNTO);
            } 
            // fall through
          case 65: break;
          case 4: 
            { return new Symbol(sym.IDENT,yytext());
            } 
            // fall through
          case 66: break;
          case 5: 
            { return new Symbol(sym.MENOS);
            } 
            // fall through
          case 67: break;
          case 6: 
            { return new Symbol(sym.DIV);
            } 
            // fall through
          case 68: break;
          case 7: 
            { return new Symbol(sym.POR);
            } 
            // fall through
          case 69: break;
          case 8: 
            { 
            } 
            // fall through
          case 70: break;
          case 9: 
            { return new Symbol(sym.PYC);
            } 
            // fall through
          case 71: break;
          case 10: 
            { return new Symbol(sym.COMA);
            } 
            // fall through
          case 72: break;
          case 11: 
            { return new Symbol(sym.AP);
            } 
            // fall through
          case 73: break;
          case 12: 
            { return new Symbol(sym.CP);
            } 
            // fall through
          case 74: break;
          case 13: 
            { return new Symbol(sym.ALL);
            } 
            // fall through
          case 75: break;
          case 14: 
            { return new Symbol(sym.CLL);
            } 
            // fall through
          case 76: break;
          case 15: 
            { return new Symbol(sym.AC);
            } 
            // fall through
          case 77: break;
          case 16: 
            { return new Symbol(sym.CC);
            } 
            // fall through
          case 78: break;
          case 17: 
            { return new Symbol(sym.MAS);
            } 
            // fall through
          case 79: break;
          case 18: 
            { return new Symbol(sym.ASIG);
            } 
            // fall through
          case 80: break;
          case 19: 
            { return new Symbol(sym.MOD);
            } 
            // fall through
          case 81: break;
          case 20: 
            { return new Symbol(sym.INTERR);
            } 
            // fall through
          case 82: break;
          case 21: 
            { return new Symbol(sym.DP);
            } 
            // fall through
          case 83: break;
          case 22: 
            { return new Symbol(sym.AMPERSAND);
            } 
            // fall through
          case 84: break;
          case 23: 
            { return new Symbol(sym.MONTE);
            } 
            // fall through
          case 85: break;
          case 24: 
            { return new Symbol(sym.NEG);
            } 
            // fall through
          case 86: break;
          case 25: 
            { return new Symbol(sym.MENOR);
            } 
            // fall through
          case 87: break;
          case 26: 
            { return new Symbol(sym.MAYOR);
            } 
            // fall through
          case 88: break;
          case 27: 
            { return new Symbol(sym.REAL,yytext());
            } 
            // fall through
          case 89: break;
          case 28: 
            { return new Symbol(sym.DECR);
            } 
            // fall through
          case 90: break;
          case 29: 
            { return new Symbol(sym.MENOSIGUAL);
            } 
            // fall through
          case 91: break;
          case 30: 
            { return new Symbol(sym.STRINGTEXT,yytext());
            } 
            // fall through
          case 92: break;
          case 31: 
            { return new Symbol(sym.ENTREIGUAL);
            } 
            // fall through
          case 93: break;
          case 32: 
            { return new Symbol(sym.PORIGUAL);
            } 
            // fall through
          case 94: break;
          case 33: 
            { return new Symbol(sym.INCR);
            } 
            // fall through
          case 95: break;
          case 34: 
            { return new Symbol(sym.MASIGUAL);
            } 
            // fall through
          case 96: break;
          case 35: 
            { return new Symbol(sym.IGUAL);
            } 
            // fall through
          case 97: break;
          case 36: 
            { return new Symbol(sym.ELVIS);
            } 
            // fall through
          case 98: break;
          case 37: 
            { return new Symbol(sym.AND);
            } 
            // fall through
          case 99: break;
          case 38: 
            { return new Symbol(sym.MAYUS);
            } 
            // fall through
          case 100: break;
          case 39: 
            { return new Symbol(sym.DIST);
            } 
            // fall through
          case 101: break;
          case 40: 
            { return new Symbol(sym.MENOREQ);
            } 
            // fall through
          case 102: break;
          case 41: 
            { return new Symbol(sym.MAYOREQ);
            } 
            // fall through
          case 103: break;
          case 42: 
            { return new Symbol(sym.OR);
            } 
            // fall through
          case 104: break;
          case 43: 
            { return new Symbol(sym.IF);
            } 
            // fall through
          case 105: break;
          case 44: 
            { return new Symbol(sym.IN);
            } 
            // fall through
          case 106: break;
          case 45: 
            { return new Symbol(sym.DO);
            } 
            // fall through
          case 107: break;
          case 46: 
            { return new Symbol(sym.CHARTEXT,yytext());
            } 
            // fall through
          case 108: break;
          case 47: 
            { return new Symbol(sym.INT);
            } 
            // fall through
          case 109: break;
          case 48: 
            { return new Symbol(sym.FOR);
            } 
            // fall through
          case 110: break;
          case 49: 
            { return new Symbol(sym.ELSE);
            } 
            // fall through
          case 111: break;
          case 50: 
            { return new Symbol(sym.CHAR);
            } 
            // fall through
          case 112: break;
          case 51: 
            { return new Symbol(sym.CASE);
            } 
            // fall through
          case 113: break;
          case 52: 
            { return new Symbol(sym.BREAK);
            } 
            // fall through
          case 114: break;
          case 53: 
            { return new Symbol(sym.CINT);
            } 
            // fall through
          case 115: break;
          case 54: 
            { return new Symbol(sym.FLOAT);
            } 
            // fall through
          case 116: break;
          case 55: 
            { return new Symbol(sym.WHILE);
            } 
            // fall through
          case 117: break;
          case 56: 
            { return new Symbol(sym.PRINT);
            } 
            // fall through
          case 118: break;
          case 57: 
            { return new Symbol(sym.CCHAR);
            } 
            // fall through
          case 119: break;
          case 58: 
            { return new Symbol(sym.LENGTH);
            } 
            // fall through
          case 120: break;
          case 59: 
            { return new Symbol(sym.STRING);
            } 
            // fall through
          case 121: break;
          case 60: 
            { return new Symbol(sym.SWITCH);
            } 
            // fall through
          case 122: break;
          case 61: 
            { return new Symbol(sym.CFLOAT);
            } 
            // fall through
          case 123: break;
          case 62: 
            { return new Symbol(sym.DEFAULT);
            } 
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
